/*
 * This file was automatically generated by EvoSuite
 * Thu May 02 18:49:16 GMT 2024
 */

package Model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Model.Artigo;
import Model.Malas;
import Model.Sapatilhas;
import Model.TShirt;
import Model.Utilizador;
import java.time.LocalDate;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utilizador_ESTest extends Utilizador_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      LocalDate localDate0 = MockLocalDate.now();
      utilizador0.calculaFaturacaoIntervalo(localDate0, (LocalDate) null);
      assertEquals(1, utilizador0.getId());
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      List<Artigo> list0 = utilizador0.getPorVender();
      utilizador0.setVendas(list0);
      Malas malas0 = new Malas();
      utilizador0.adicionaVendas(malas0);
      utilizador0.removeVenda(527);
      assertEquals(0, utilizador0.getNif());
      assertEquals(1, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Malas.Tipos_Malas malas_Tipos_Malas0 = Malas.Tipos_Malas.NORMAL;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.NOVO;
      Artigo.Avaliacao artigo_Avaliacao0 = Artigo.Avaliacao.IMPECAVEL;
      Malas malas0 = new Malas(malas_Tipos_Malas0, (-2216.5957F), "", (-1), "", artigo_Estado0, (-1), artigo_Avaliacao0, "", "", "R6o,u(.I", 0.0, 699.92, "");
      utilizador0.adicionarPorVender(malas0);
      Artigo artigo0 = utilizador0.removePorVender((-1628));
      assertEquals(0, utilizador0.getNif());
      assertEquals(1, utilizador0.getId());
      assertNull(artigo0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Malas malas0 = new Malas();
      malas0.setPrecoBase((-1323.03864));
      utilizador0.adicionarPorVender(malas0);
      Artigo artigo0 = utilizador0.removePorVender(1);
      assertEquals(0, utilizador0.getNif());
      assertNotNull(artigo0);
      assertEquals(1, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Malas malas0 = new Malas();
      malas0.setNumeroDonos(1619);
      utilizador0.adicionarPorVender(malas0);
      Artigo artigo0 = utilizador0.removePorVender(1);
      assertNotNull(artigo0);
      assertEquals(1, utilizador0.getId());
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Malas malas0 = new Malas();
      malas0.setNumeroDonos((-1));
      utilizador0.adicionarPorVender(malas0);
      Artigo artigo0 = utilizador0.removePorVender(1);
      assertEquals(0, utilizador0.getNif());
      assertNotNull(artigo0);
      assertEquals(1, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Malas.Tipos_Malas malas_Tipos_Malas0 = Malas.Tipos_Malas.PREMIUM;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.NOVO;
      Artigo.Avaliacao artigo_Avaliacao0 = Artigo.Avaliacao.SATISFATORIO;
      Malas malas0 = new Malas(malas_Tipos_Malas0, 1574, "", 1574, "_V<ynsAQg'W|w", artigo_Estado0, 1, artigo_Avaliacao0, "_V<ynsAQg'W|w", "", "NOVO", 74.0, 1574, (String) null);
      utilizador0.adicionarPorVender(malas0);
      Artigo artigo0 = utilizador0.removePorVender(1);
      assertNotNull(artigo0);
      assertEquals(0, utilizador0.getNif());
      assertEquals(1, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Malas malas0 = new Malas();
      malas0.setCorrecaoPreco((-2864.7987723));
      utilizador0.adicionarPorVender(malas0);
      Artigo artigo0 = utilizador0.removePorVender(1);
      assertEquals(0, utilizador0.getNif());
      assertNotNull(artigo0);
      assertEquals(1, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      Utilizador utilizador0 = new Utilizador();
      List<Artigo> list0 = utilizador0.getCompras();
      Utilizador utilizador1 = new Utilizador((String) null, (String) null, "&$&|<rF||e3F<", (String) null, 4463, list0, list0, list0, hashMap0);
      Utilizador utilizador2 = new Utilizador(utilizador1);
      String string0 = utilizador2.getPassword();
      assertEquals(0, utilizador0.getNif());
      assertEquals(2, utilizador1.getId());
      assertEquals(2, utilizador2.getId());
      assertNull(string0);
      assertEquals(4463, utilizador1.getNif());
      assertEquals(4463, utilizador2.getNif());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      List<Artigo> list0 = utilizador0.getCompras();
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      Utilizador utilizador1 = new Utilizador("=MGwX@@eTjD", "}6C_;mQV1^-%r!fr)", "Model.Utilizador", "}6C_;mQV1^-%r!fr)", 0, list0, list0, list0, hashMap0);
      Utilizador utilizador2 = new Utilizador(utilizador1);
      String string0 = utilizador2.getPassword();
      assertEquals("Model.Utilizador", utilizador2.getNome());
      assertEquals(1, utilizador0.getId());
      assertEquals("=MGwX@@eTjD", utilizador2.getEmail());
      assertEquals(2, utilizador2.getId());
      assertEquals(0, utilizador2.getNif());
      assertNotNull(string0);
      assertEquals(0, utilizador0.getNif());
      assertEquals("}6C_;mQV1^-%r!fr)", string0);
      assertEquals("}6C_;mQV1^-%r!fr)", utilizador2.getMorada());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.getNome();
      assertEquals(1, utilizador0.getId());
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      List<Artigo> list0 = utilizador0.getCompras();
      Map<LocalDate, Double> map0 = utilizador0.getFaturacao();
      Utilizador utilizador1 = new Utilizador("|8G/~/:W0B", "=k0qg/G", "Marca: ", "\n", 3, list0, list0, list0, map0);
      int int0 = utilizador1.getNif();
      assertEquals("Marca: ", utilizador1.getNome());
      assertEquals("|8G/~/:W0B", utilizador1.getEmail());
      assertEquals(2, utilizador1.getId());
      assertEquals("=k0qg/G", utilizador1.getPassword());
      assertEquals(0, utilizador0.getNif());
      assertEquals("\n", utilizador1.getMorada());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      Utilizador utilizador0 = new Utilizador("MN_3ZR`|b<nv4", "", "Qt\"Cex?r<roy", ")IlZ7INe`Ja9=Y+,", (-104), linkedList0, linkedList0, linkedList0, hashMap0);
      int int0 = utilizador0.getNif();
      assertEquals((-104), int0);
      assertEquals(1, utilizador0.getId());
      assertEquals(")IlZ7INe`Ja9=Y+,", utilizador0.getMorada());
      assertEquals("MN_3ZR`|b<nv4", utilizador0.getEmail());
      assertEquals("Qt\"Cex?r<roy", utilizador0.getNome());
      assertEquals("", utilizador0.getPassword());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      Map<LocalDate, Double> map0 = utilizador0.getFaturacao();
      Utilizador utilizador1 = new Utilizador("----------------------------------------\n", "", "", (String) null, 0, linkedList0, linkedList0, linkedList0, map0);
      String string0 = utilizador1.getMorada();
      assertNull(string0);
      assertEquals(2, utilizador1.getId());
      assertEquals(0, utilizador0.getNif());
      assertEquals("", utilizador1.getNome());
      assertEquals(0, utilizador1.getNif());
      assertEquals("", utilizador1.getPassword());
      assertEquals("----------------------------------------\n", utilizador1.getEmail());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      Utilizador utilizador0 = new Utilizador("", "Nome: ", "", ">", 0, linkedList0, linkedList0, linkedList0, hashMap0);
      String string0 = utilizador0.getMorada();
      assertEquals(">", string0);
      assertEquals(1, utilizador0.getId());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0, utilizador0.getNif());
      assertEquals("", utilizador0.getNome());
      assertEquals("Nome: ", utilizador0.getPassword());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      assertEquals(1, utilizador0.getId());
      
      utilizador0.setId((-1));
      int int0 = utilizador0.getId();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.adicionaFaturacao((LocalDate) null, 0.5);
      utilizador0.getFaturacao();
      assertEquals(0, utilizador0.getNif());
      assertEquals(1, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      List<Artigo> list0 = utilizador0.getPorVender();
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      Utilizador utilizador1 = new Utilizador((String) null, "B[o9AR0MF_Q", ")4s 9P|Rm", "O*P@N$,", 2, list0, list0, list0, hashMap0);
      String string0 = utilizador1.getEmail();
      assertEquals(2, utilizador1.getNif());
      assertEquals(")4s 9P|Rm", utilizador1.getNome());
      assertEquals("B[o9AR0MF_Q", utilizador1.getPassword());
      assertEquals("O*P@N$,", utilizador1.getMorada());
      assertNull(string0);
      assertEquals(2, utilizador1.getId());
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.getEmail();
      assertEquals(1, utilizador0.getId());
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      List<Artigo> list0 = utilizador0.getCompras();
      Map<LocalDate, Double> map0 = utilizador0.getFaturacao();
      Utilizador utilizador1 = new Utilizador("lD4q3.Xro{g4", "lD4q3.Xro{g4", (String) null, (String) null, (-1), list0, list0, list0, map0);
      Utilizador utilizador2 = utilizador1.clone();
      assertEquals((-1), utilizador1.getNif());
      assertEquals((-1), utilizador2.getNif());
      assertEquals(2, utilizador1.getId());
      assertEquals(0, utilizador0.getNif());
      assertEquals(2, utilizador2.getId());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      Utilizador utilizador0 = new Utilizador("7U&PIZ$7Ez~", "^[R7g-3|f95X4tm", "|.", "jp}7$x#?&+|sPG2ME'0", 741, linkedList0, linkedList0, linkedList0, hashMap0);
      Utilizador utilizador1 = utilizador0.clone();
      assertEquals("7U&PIZ$7Ez~", utilizador1.getEmail());
      assertEquals(741, utilizador0.getNif());
      assertEquals(741, utilizador1.getNif());
      assertEquals(1, utilizador0.getId());
      assertEquals("|.", utilizador1.getNome());
      assertEquals(1, utilizador1.getId());
      assertEquals("jp}7$x#?&+|sPG2ME'0", utilizador1.getMorada());
      assertEquals("^[R7g-3|f95X4tm", utilizador1.getPassword());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      List<Artigo> list0 = utilizador0.getPorVender();
      utilizador0.setVendas(list0);
      utilizador0.setId((-1425));
      utilizador0.clone();
      assertEquals((-1425), utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      LocalDate localDate0 = MockLocalDate.now();
      utilizador0.adicionaFaturacao(localDate0, 0.5);
      double double0 = utilizador0.calculaFaturacaoSempre();
      assertEquals(0.5, double0, 0.01);
      assertEquals(1, utilizador0.getId());
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1425));
      utilizador0.adicionaFaturacao(localDate0, (-1425));
      double double0 = utilizador0.calculaFaturacaoSempre();
      assertEquals(0, utilizador0.getNif());
      assertEquals((-1425.0), double0, 0.01);
      assertEquals(1, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.setVendas((List<Artigo>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.setPorVender((List<Artigo>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.setFaturacao((Map<LocalDate, Double>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.setCompras((List<Artigo>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.removeVenda((-1196));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.adicionaFaturacao((LocalDate) null, 0.0);
      // Undeclared exception!
      try { 
        utilizador0.removeFaturacao((LocalDate) null, (Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.removeCompras((List<Artigo>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.getVendas();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.adicionaFaturacao((LocalDate) null, 0.5);
      // Undeclared exception!
      try { 
        utilizador0.calculaFaturacaoIntervalo((LocalDate) null, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.adicionarPorVender((Artigo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      LocalDate localDate0 = MockLocalDate.now();
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      hashMap0.put(localDate0, (Double) null);
      utilizador0.setFaturacao(hashMap0);
      // Undeclared exception!
      try { 
        utilizador0.adicionaFaturacao(localDate0, 1536.9930228);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      Utilizador utilizador0 = null;
      try {
        utilizador0 = new Utilizador("NIF: ", "NIF: ", "NIF: ", "NIF: ", 0, linkedList0, linkedList0, linkedList0, (Map<LocalDate, Double>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      Malas.Tipos_Malas malas_Tipos_Malas0 = Malas.Tipos_Malas.NORMAL;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.NOVO;
      Artigo.Avaliacao artigo_Avaliacao0 = Artigo.Avaliacao.SATISFATORIO;
      Malas malas0 = new Malas(malas_Tipos_Malas0, 4070.3F, (String) null, 3128, "T][=vy", artigo_Estado0, 180, artigo_Avaliacao0, "T][=vy", (String) null, "T][=vy", (-1558), 4070.3F, "ir dv:d^+KE^$ZL]t`");
      linkedList0.add((Artigo) malas0);
      utilizador0.setVendas(linkedList0);
      assertEquals(0, utilizador0.getNif());
      assertEquals(1, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      List<Artigo> list0 = utilizador0.getPorVender();
      utilizador0.setVendas(list0);
      Malas malas0 = new Malas();
      utilizador0.adicionaVendas(malas0);
      utilizador0.getVendas();
      assertEquals(1, utilizador0.getId());
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      List<Artigo> list0 = utilizador0.getPorVender();
      utilizador0.setVendas(list0);
      utilizador0.getVendas();
      assertEquals(0, utilizador0.getNif());
      assertEquals(1, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Malas.Tipos_Malas malas_Tipos_Malas0 = Malas.Tipos_Malas.PREMIUM;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.NOVO;
      Artigo.Avaliacao artigo_Avaliacao0 = Artigo.Avaliacao.SATISFATORIO;
      Malas malas0 = new Malas(malas_Tipos_Malas0, 1574, "", 1574, "_V<ynsAQg'W|w", artigo_Estado0, 1, artigo_Avaliacao0, "_V<ynsAQg'W|w", "", "NOVO", 74.0, 1574, (String) null);
      utilizador0.adicionarPorVender(malas0);
      List<Artigo> list0 = utilizador0.getPorVender();
      utilizador0.setPorVender(list0);
      assertEquals(0, utilizador0.getNif());
      assertEquals(1, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      utilizador0.setCompras(linkedList0);
      assertEquals(1, utilizador0.getId());
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Sapatilhas sapatilhas0 = new Sapatilhas();
      utilizador0.adicionaCompra(sapatilhas0);
      List<Artigo> list0 = utilizador0.getCompras();
      utilizador0.setCompras(list0);
      assertEquals(0, utilizador0.getNif());
      assertEquals(1, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      int int0 = utilizador0.getId();
      assertEquals(1, int0);
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.getPassword();
      assertEquals(1, utilizador0.getId());
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      Utilizador utilizador0 = new Utilizador("MN_3ZR`|b<nv4", "", "Qt\"Cex?r<roy", ")IlZ7INe`Ja9=Y+,", (-104), linkedList0, linkedList0, linkedList0, hashMap0);
      String string0 = utilizador0.getNome();
      assertEquals(1, utilizador0.getId());
      assertEquals("MN_3ZR`|b<nv4", utilizador0.getEmail());
      assertEquals("Qt\"Cex?r<roy", string0);
      assertEquals("", utilizador0.getPassword());
      assertEquals((-104), utilizador0.getNif());
      assertEquals(")IlZ7INe`Ja9=Y+,", utilizador0.getMorada());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      Utilizador utilizador0 = new Utilizador("MN_3ZR`|b<nv4", "", "Qt\"Cex?r<roy", ")IlZ7INe`Ja9=Y+,", (-104), linkedList0, linkedList0, linkedList0, hashMap0);
      String string0 = utilizador0.getEmail();
      assertEquals("Qt\"Cex?r<roy", utilizador0.getNome());
      assertEquals(1, utilizador0.getId());
      assertEquals("MN_3ZR`|b<nv4", string0);
      assertEquals("", utilizador0.getPassword());
      assertEquals((-104), utilizador0.getNif());
      assertEquals(")IlZ7INe`Ja9=Y+,", utilizador0.getMorada());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.getMorada();
      assertEquals(1, utilizador0.getId());
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      int int0 = utilizador0.getNif();
      assertEquals(0, int0);
      assertEquals(1, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.adicionaFaturacao((LocalDate) null, 0.5);
      utilizador0.adicionaFaturacao((LocalDate) null, 1542.5196496532);
      assertEquals(0, utilizador0.getNif());
      assertEquals(1, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.adicionaFaturacao((LocalDate) null, 0.5);
      Double double0 = new Double((-1622.88));
      utilizador0.removeFaturacao((LocalDate) null, double0);
      assertEquals(1, utilizador0.getId());
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      Double double0 = new Double(0.0);
      utilizador0.removeFaturacao(localDate0, double0);
      assertEquals(0, utilizador0.getNif());
      assertEquals(1, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      List<Artigo> list0 = utilizador0.getPorVender();
      boolean boolean0 = utilizador0.equals(list0);
      assertEquals(0, utilizador0.getNif());
      assertEquals(1, utilizador0.getId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      boolean boolean0 = utilizador0.equals((Object) null);
      assertEquals(0, utilizador0.getNif());
      assertFalse(boolean0);
      assertEquals(1, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      boolean boolean0 = utilizador0.equals(utilizador0);
      assertTrue(boolean0);
      assertEquals(0, utilizador0.getNif());
      assertEquals(1, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      List<Artigo> list0 = utilizador0.getPorVender();
      utilizador0.setVendas(list0);
      Utilizador utilizador1 = new Utilizador(utilizador0);
      boolean boolean0 = utilizador1.equals(utilizador0);
      assertEquals(1, utilizador0.getId());
      assertFalse(boolean0);
      assertEquals(0, utilizador1.getNif());
      assertEquals(1, utilizador1.getId());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      List<Artigo> list0 = utilizador0.getPorVender();
      utilizador0.setVendas(list0);
      Malas malas0 = new Malas();
      utilizador0.adicionaVendas(malas0);
      utilizador0.removeVenda((-1307));
      assertEquals(0, utilizador0.getNif());
      assertEquals(1, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      List<Artigo> list0 = utilizador0.getPorVender();
      utilizador0.setVendas(list0);
      Malas malas0 = new Malas();
      utilizador0.adicionaVendas(malas0);
      utilizador0.removeVenda(1);
      assertEquals(1, utilizador0.getId());
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      Utilizador utilizador0 = new Utilizador();
      Map<LocalDate, Double> map0 = utilizador0.getFaturacao();
      TShirt tShirt0 = new TShirt();
      linkedList0.add((Artigo) tShirt0);
      Utilizador utilizador1 = new Utilizador("f", "f", "f", "f", 4, linkedList0, linkedList0, linkedList0, map0);
      Artigo artigo0 = utilizador1.removePorVender(4);
      assertEquals(2, utilizador1.getId());
      assertNull(artigo0);
      assertEquals(4, utilizador1.getNif());
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      List<Artigo> list0 = utilizador0.getCompras();
      utilizador0.removeCompras(list0);
      assertEquals(0, utilizador0.getNif());
      assertEquals(1, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setEmail("[s3J$I(j<");
      assertEquals(0, utilizador0.getNif());
      assertEquals(1, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      double double0 = utilizador0.calculaFaturacaoSempre();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, utilizador0.getNif());
      assertEquals(1, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      assertEquals(1, utilizador0.getId());
      
      utilizador0.setId(0);
      int int0 = utilizador0.getId();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      String string0 = utilizador0.toString();
      assertEquals("----------------------------------------\n               UTILIZADOR               \n----------------------------------------\nUtilizador: 1\nEmail: \nPassword: \nNome: \nMorada: \nNIF: 0\nPor Vender: []\n", string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.adicionaCompra((Artigo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setNif((-555));
      assertEquals((-555), utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setPassword("[s3J$I(j<");
      assertEquals(1, utilizador0.getId());
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setMorada("\n");
      assertEquals(1, utilizador0.getId());
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = null;
      try {
        utilizador1 = new Utilizador(utilizador0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setNome((String) null);
      utilizador0.getNome();
      assertEquals(0, utilizador0.getNif());
      assertEquals(1, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Malas malas0 = new Malas();
      // Undeclared exception!
      try { 
        utilizador0.adicionaVendas(malas0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Utilizador", e);
      }
  }
}
