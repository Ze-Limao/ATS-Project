/*
 * This file was automatically generated by EvoSuite
 * Thu May 02 18:48:10 GMT 2024
 */

package Model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Model.Artigo;
import Model.Encomenda;
import Model.Malas;
import Model.Sapatilhas;
import Model.Transportadoras;
import Model.Utilizador;
import Model.Vintage;
import java.time.Clock;
import java.time.LocalDate;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.IsoChronology;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Vintage_ESTest extends Vintage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Transportadoras transportadoras0 = new Transportadoras();
      transportadoras0.setVolFaturacao((-3274));
      vintage0.adicionarTransportadora(transportadoras0);
      String string0 = vintage0.calculaMaiorVolFaturacao();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      // Undeclared exception!
      try { 
        vintage0.getMaiorFaturacaoIntervalo(localDate0, (LocalDate) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      LocalDate localDate0 = MockLocalDate.now();
      Utilizador utilizador0 = new Utilizador();
      vintage0.adicionaUtilizador(utilizador0);
      String string0 = vintage0.calculaMaiorFauracaoIntevalo((LocalDate) null, localDate0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      LocalDate localDate0 = MockLocalDate.now();
      List<Artigo> list0 = vintage0.getArtigosVenda();
      Utilizador utilizador0 = new Utilizador();
      Map<LocalDate, Double> map0 = utilizador0.getFaturacao();
      Utilizador utilizador1 = new Utilizador("yqm", "PENDENTE", "~(G", "{ZlufPJf$_&", 1, list0, list0, list0, map0);
      vintage0.adicionaUtilizador(utilizador1);
      String string0 = vintage0.calculaMaiorFauracaoIntevalo(localDate0, localDate0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      List<Artigo> list0 = vintage0.getArtigosVenda();
      Utilizador utilizador0 = new Utilizador();
      Map<LocalDate, Double> map0 = utilizador0.getFaturacao();
      Utilizador utilizador1 = new Utilizador("yqm", "PENDENTE", "~(G", "{ZlufPJf$_&", 1, list0, list0, list0, map0);
      vintage0.adicionaUtilizador(utilizador1);
      String string0 = vintage0.calculaMaiorFaturacaoSempre();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Double double0 = new Double(2151.744375274408);
      Double double1 = new Double(0.0);
      // Undeclared exception!
      try { 
        vintage0.aterarTransportadora("", double0, double1, 1237);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Encomenda encomenda0 = new Encomenda();
      vintage0.addEncomenda(encomenda0);
      vintage0.adiarPrazoLimite((-1295), (-1295));
      assertNull(vintage0.getSessaoAtual());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Encomenda encomenda0 = new Encomenda();
      vintage0.addEncomenda(encomenda0);
      vintage0.devolverEncomenda((-2200));
      assertNull(vintage0.getSessaoAtual());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Encomenda encomenda0 = new Encomenda();
      LocalDate localDate0 = MockLocalDate.now();
      encomenda0.setPrazoLimite(localDate0);
      vintage0.addEncomenda(encomenda0);
      vintage0.avancarTempo();
      assertNull(vintage0.getSessaoAtual());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, Utilizador> hashMap0 = new HashMap<String, Utilizador>();
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Vintage vintage0 = new Vintage();
      List<Artigo> list0 = vintage0.getArtigosVenda();
      Utilizador utilizador0 = new Utilizador();
      Map<LocalDate, Double> map0 = utilizador0.getFaturacao();
      Utilizador utilizador1 = new Utilizador("#>kL,b:Yv ", "iA]F+bjma]DXSk;", "Cor: ", "", 0, list0, list0, list0, map0);
      hashMap0.put("iA]F+bjma]DXSk;", utilizador1);
      Map<String, Transportadoras> map1 = vintage0.getTransportadorasPremium();
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1075L));
      Vintage vintage1 = new Vintage("[*43@2d", hashMap0, linkedList0, map1, localDate0);
      assertFalse(vintage1.equals((Object)vintage0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      LocalDate localDate0 = MockLocalDate.now();
      List<Artigo> list0 = vintage0.getArtigosVenda();
      Utilizador utilizador0 = new Utilizador();
      Map<LocalDate, Double> map0 = utilizador0.getFaturacao();
      Utilizador utilizador1 = new Utilizador("yqm", "PENDENTE", "~(G", "{ZlufPJf$_&", 1, list0, list0, list0, map0);
      vintage0.adicionaUtilizador(utilizador1);
      Sapatilhas.Tipos_Sapatilhas sapatilhas_Tipos_Sapatilhas0 = Sapatilhas.Tipos_Sapatilhas.NORMAL;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.NOVO;
      Artigo.Avaliacao artigo_Avaliacao0 = Artigo.Avaliacao.BOM;
      Sapatilhas sapatilhas0 = new Sapatilhas((-1908874352), false, "~(G", localDate0, sapatilhas_Tipos_Sapatilhas0, "RISCAS", artigo_Estado0, 1, artigo_Avaliacao0, "{ZlufPJf$_&", "~(G", "yqm", (-1908874352), 2855.0955205816, "]P(,qy/VAWj-PiX");
      vintage0.adicionarPorVender(sapatilhas0, "yqm");
      assertEquals("{ZlufPJf$_&", sapatilhas0.getDescricao());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setPrecoFinal((-1365.0923828809));
      LocalDate localDate0 = MockLocalDate.ofYearDay(1, 1);
      encomenda0.setPrazoLimite(localDate0);
      vintage0.addEncomenda(encomenda0);
      vintage0.avancarTempo();
      double double0 = vintage0.totalDinheiroVintage();
      assertEquals((-1365.0923828809), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      LocalDate localDate0 = MockLocalDate.now();
      List<Artigo> list0 = vintage0.getArtigosVenda();
      Utilizador utilizador0 = new Utilizador();
      Map<LocalDate, Double> map0 = utilizador0.getFaturacao();
      Utilizador utilizador1 = new Utilizador("yqm", "PENDENTE", "~(G", "{ZlufPJf$_&", 1, list0, list0, list0, map0);
      vintage0.adicionaUtilizador(utilizador1);
      Map<String, Double> map1 = vintage0.top10Vendedores(localDate0);
      assertFalse(map1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      List<Artigo> list0 = vintage0.getArtigosVenda();
      Utilizador utilizador0 = new Utilizador();
      Map<LocalDate, Double> map0 = utilizador0.getFaturacao();
      Utilizador utilizador1 = new Utilizador("yqm", "PENDENTE", "yqm", "{ZlufPJf$_&", (-2418), list0, list0, list0, map0);
      vintage0.adicionaUtilizador(utilizador1);
      Map<String, Utilizador> map1 = vintage0.getUtilizadores();
      assertEquals(1, map1.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Transportadoras transportadoras0 = new Transportadoras("BF`-e.q(kiPw/", 3451, 3451, true, (-1.0));
      Long long0 = new Long(3451);
      transportadoras0.calculaPrecoExpedicao(long0);
      vintage0.adicionarTransportadora(transportadoras0);
      Transportadoras transportadoras1 = vintage0.getTransportadora("BF`-e.q(kiPw/");
      assertTrue(transportadoras1.equals((Object)transportadoras0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Transportadoras transportadoras0 = new Transportadoras("BF`-e.q(kiPw/", 3451, 3451, true, (-1.0));
      vintage0.adicionarTransportadora(transportadoras0);
      Transportadoras transportadoras1 = vintage0.getTransportadora("BF`-e.q(kiPw/");
      assertNotSame(transportadoras1, transportadoras0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<String, Utilizador> hashMap0 = new HashMap<String, Utilizador>();
      Vintage vintage0 = new Vintage();
      List<Encomenda> list0 = vintage0.encomendasParaDevolver();
      HashMap<String, Transportadoras> hashMap1 = new HashMap<String, Transportadoras>();
      Vintage vintage1 = new Vintage("aASKR>", hashMap0, list0, hashMap1, (LocalDate) null);
      String string0 = vintage1.getSessaoAtual();
      assertEquals("aASKR>", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, Utilizador> hashMap0 = new HashMap<String, Utilizador>();
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      HashMap<String, Transportadoras> hashMap1 = new HashMap<String, Transportadoras>();
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1344L));
      Vintage vintage0 = new Vintage("", hashMap0, linkedList0, hashMap1, localDate0);
      String string0 = vintage0.getSessaoAtual();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Utilizador utilizador0 = new Utilizador();
      vintage0.adicionaUtilizador(utilizador0);
      double double0 = vintage0.getMaiorFaturacaoSempre("");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<String, Utilizador> hashMap0 = new HashMap<String, Utilizador>();
      Vintage vintage0 = new Vintage();
      List<Encomenda> list0 = vintage0.getEncomendasSessaoAtual();
      HashMap<String, Transportadoras> hashMap1 = new HashMap<String, Transportadoras>();
      Vintage vintage1 = new Vintage("5d:$Wb", hashMap0, list0, hashMap1, (LocalDate) null);
      LocalDate localDate0 = vintage1.getDataPrograma();
      assertNull(localDate0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Utilizador utilizador0 = new Utilizador();
      Malas.Tipos_Malas malas_Tipos_Malas0 = Malas.Tipos_Malas.NORMAL;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.NOVO;
      Artigo.Avaliacao artigo_Avaliacao0 = Artigo.Avaliacao.SATISFATORIO;
      Malas malas0 = new Malas(malas_Tipos_Malas0, 1, "Sess\u00E3o Atual: ", 746, "PENDENTE", artigo_Estado0, 1, artigo_Avaliacao0, "&F,/B0jK,V7a9Xwj#W", "u%@VL4ob];", "3JUx(VV", 1, 4064.30884, "xlN!");
      utilizador0.adicionarPorVender(malas0);
      vintage0.adicionaUtilizador(utilizador0);
      List<Artigo> list0 = vintage0.getArtigosVenda();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Utilizador utilizador0 = new Utilizador();
      List<Artigo> list0 = utilizador0.getCompras();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      // Undeclared exception!
      try { 
        vintage0.trataEncomenda((List<Integer>) null, list0, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      vintage0.addEncomenda((Encomenda) null);
      // Undeclared exception!
      try { 
        vintage0.totalDinheiroVintage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      // Undeclared exception!
      try { 
        vintage0.setTransportadoras((Map<String, Transportadoras>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      // Undeclared exception!
      try { 
        vintage0.setEncomendas((List<Encomenda>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<String, Utilizador> hashMap0 = new HashMap<String, Utilizador>();
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Vintage vintage0 = new Vintage();
      Map<String, Transportadoras> map0 = vintage0.getTransportadoras();
      Encomenda encomenda0 = new Encomenda();
      linkedList0.add(encomenda0);
      Period period0 = Period.ZERO;
      IsoChronology isoChronology0 = period0.getChronology();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      Vintage vintage1 = new Vintage("Utilizadores: ", hashMap0, linkedList0, map0, localDate0);
      // Undeclared exception!
      try { 
        vintage1.getEncomendasSessaoAtual();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Encomenda encomenda0 = new Encomenda();
      linkedList0.add(encomenda0);
      vintage0.setEncomendas(linkedList0);
      // Undeclared exception!
      try { 
        vintage0.encomendasParaDevolver();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      // Undeclared exception!
      try { 
        vintage0.adicionarTransportadora((Transportadoras) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      vintage0.addEncomenda((Encomenda) null);
      // Undeclared exception!
      try { 
        vintage0.adiarPrazoLimite(45, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vintage vintage0 = null;
      try {
        vintage0 = new Vintage((Vintage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Transportadoras transportadoras0 = new Transportadoras("BF`-e.q(kiPw/", (-1.0), (-1.0), true, (-1.0));
      vintage0.adicionarTransportadora(transportadoras0);
      Map<String, Transportadoras> map0 = vintage0.getTransportadorasPremium();
      vintage0.setTransportadoras(map0);
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      HashMap<String, Utilizador> hashMap0 = new HashMap<String, Utilizador>();
      hashMap0.put("", (Utilizador) null);
      // Undeclared exception!
      try { 
        vintage0.setUtizadores(hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      HashMap<String, Utilizador> hashMap0 = new HashMap<String, Utilizador>();
      vintage0.setUtizadores(hashMap0);
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      LocalDate localDate0 = vintage0.getDataPrograma();
      assertNotNull(localDate0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      String string0 = vintage0.getSessaoAtual();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Encomenda encomenda0 = new Encomenda();
      vintage0.addEncomenda(encomenda0);
      double double0 = vintage0.totalDinheiroVintage();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      LocalDate localDate0 = MockLocalDate.now();
      Utilizador utilizador0 = new Utilizador();
      Malas.Tipos_Malas malas_Tipos_Malas0 = Malas.Tipos_Malas.NORMAL;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.USADO;
      Artigo.Avaliacao artigo_Avaliacao0 = Artigo.Avaliacao.BOM;
      Malas malas0 = new Malas(malas_Tipos_Malas0, 1, "l19C-", 1, "l19C-", artigo_Estado0, (-2200), artigo_Avaliacao0, "PENDENTE", "{ZlJfPJf$_&", "l19C-", 0.0, (-1459.1152366), "yqm");
      utilizador0.adicionaCompra(malas0);
      vintage0.adicionaUtilizador(utilizador0);
      Map<String, Double> map0 = vintage0.top10Compradores(localDate0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      LocalDate localDate0 = MockLocalDate.of(3451, 1, 1);
      Map<String, Double> map0 = vintage0.top10Compradores(localDate0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      LocalDate localDate0 = MockLocalDate.now();
      Utilizador utilizador0 = new Utilizador();
      vintage0.adicionaUtilizador(utilizador0);
      // Undeclared exception!
      try { 
        vintage0.top10Vendedores(localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      LocalDate localDate0 = MockLocalDate.ofYearDay((-1933), 1);
      Map<String, Double> map0 = vintage0.top10Vendedores(localDate0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Utilizador utilizador0 = new Utilizador();
      vintage0.adicionaUtilizador(utilizador0);
      // Undeclared exception!
      try { 
        vintage0.listarVendas("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      List<Artigo> list0 = vintage0.listarVendas("5d:$Wb");
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Transportadoras transportadoras0 = new Transportadoras("BF`-e.q(kiPw/", 3451, 3451, true, (-1.0));
      Long long0 = new Long(3451);
      transportadoras0.calculaPrecoExpedicao(long0);
      vintage0.adicionarTransportadora(transportadoras0);
      String string0 = vintage0.calculaMaiorVolFaturacao();
      assertEquals("BF`-e.q(kiPw/", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Transportadoras transportadoras0 = new Transportadoras();
      vintage0.adicionarTransportadora(transportadoras0);
      String string0 = vintage0.calculaMaiorVolFaturacao();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Transportadoras transportadoras0 = new Transportadoras("BF`-e.q(kiPw/", (-1.0), (-1.0), true, (-1.0));
      vintage0.adicionarTransportadora(transportadoras0);
      // Undeclared exception!
      try { 
        vintage0.calculaCustoExpedicao((List<Artigo>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      double double0 = vintage0.calculaCustoExpedicao((List<Artigo>) null);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(3);
      linkedList0.add(integer0);
      Utilizador utilizador0 = new Utilizador();
      List<Artigo> list0 = utilizador0.getPorVender();
      Encomenda encomenda0 = new Encomenda();
      Map<Integer, String> map0 = encomenda0.getVendedores();
      vintage0.trataEncomenda(linkedList0, list0, map0);
      assertNull(vintage0.getSessaoAtual());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Encomenda encomenda0 = new Encomenda();
      vintage0.addEncomenda(encomenda0);
      vintage0.adiarPrazoLimite(1, 776);
      assertNull(vintage0.getSessaoAtual());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Encomenda encomenda0 = new Encomenda();
      vintage0.addEncomenda(encomenda0);
      vintage0.adiarPrazoLimite(45, 10);
      assertNull(vintage0.getSessaoAtual());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Encomenda encomenda0 = new Encomenda();
      vintage0.addEncomenda(encomenda0);
      vintage0.devolverEncomenda(766);
      assertNull(vintage0.getSessaoAtual());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Encomenda encomenda0 = new Encomenda();
      vintage0.addEncomenda(encomenda0);
      // Undeclared exception!
      try { 
        vintage0.devolverEncomenda(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Encomenda encomenda0 = new Encomenda();
      LocalDate localDate0 = MockLocalDate.ofYearDay(1, 1);
      Encomenda.Estado_Encomenda encomenda_Estado_Encomenda0 = Encomenda.Estado_Encomenda.DEVOLVIDA;
      encomenda0.setEstado(encomenda_Estado_Encomenda0);
      encomenda0.setPrazoLimite(localDate0);
      vintage0.addEncomenda(encomenda0);
      vintage0.avancarTempo();
      assertNull(vintage0.getSessaoAtual());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Encomenda encomenda0 = new Encomenda();
      vintage0.addEncomenda(encomenda0);
      vintage0.avancarTempo();
      assertNull(vintage0.getSessaoAtual());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      boolean boolean0 = vintage0.existeUser("U", "\n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      boolean boolean0 = vintage0.existeEmail("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Transportadoras transportadoras0 = new Transportadoras("Y2xN0 +@.r3o-vY", (-1853.02663), 1.0, false, 1332.0);
      vintage0.adicionarTransportadora(transportadoras0);
      Map<String, Transportadoras> map0 = vintage0.getTransportadorasPremium();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      List<Artigo> list0 = vintage0.getArtigosVenda();
      Utilizador utilizador0 = new Utilizador();
      Map<LocalDate, Double> map0 = utilizador0.getFaturacao();
      Utilizador utilizador1 = new Utilizador("yqm", "PENDENTE", "~(G", "{ZlufPJf$_&", 1, list0, list0, list0, map0);
      vintage0.adicionaUtilizador(utilizador1);
      boolean boolean0 = vintage0.existeEmail("yqm");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      HashMap<String, Utilizador> hashMap0 = new HashMap<String, Utilizador>();
      Vintage vintage0 = new Vintage();
      List<Encomenda> list0 = vintage0.getEncomendasSessaoAtual();
      Map<String, Transportadoras> map0 = vintage0.getTransportadoras();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(3445L);
      Vintage vintage1 = new Vintage("&F,/B0jK,V7a9Xwj#W", hashMap0, list0, map0, localDate0);
      Vintage vintage2 = new Vintage(vintage1);
      boolean boolean0 = vintage1.equals(vintage2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      HashMap<String, Utilizador> hashMap0 = new HashMap<String, Utilizador>();
      Vintage vintage0 = new Vintage();
      boolean boolean0 = vintage0.equals(hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      boolean boolean0 = vintage0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      boolean boolean0 = vintage0.equals(vintage0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      HashMap<String, Utilizador> hashMap0 = new HashMap<String, Utilizador>();
      Vintage vintage0 = new Vintage();
      List<Encomenda> list0 = vintage0.getEncomendasSessaoAtual();
      Map<String, Transportadoras> map0 = vintage0.getTransportadoras();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(3445L);
      Vintage vintage1 = new Vintage("&F,/B0jK,V7a9Xwj#W", hashMap0, list0, map0, localDate0);
      Vintage vintage2 = new Vintage(vintage1);
      boolean boolean0 = vintage2.equals(vintage0);
      assertFalse(boolean0);
      assertTrue(vintage1.equals((Object)vintage2));
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Transportadoras transportadoras0 = new Transportadoras("Y2xN0 +@.r3o-vY", (-1853.02663), 1.0, false, 1332.0);
      vintage0.adicionarTransportadora(transportadoras0);
      Map<String, Transportadoras> map0 = vintage0.getTransportadoras();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Encomenda encomenda0 = new Encomenda();
      linkedList0.add(encomenda0);
      vintage0.setEncomendas(linkedList0);
      List<Encomenda> list0 = vintage0.getEncomendas();
      assertTrue(list0.contains(encomenda0));
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      HashMap<String, Utilizador> hashMap0 = new HashMap<String, Utilizador>();
      Vintage vintage0 = new Vintage();
      List<Encomenda> list0 = vintage0.encomendasParaDevolver();
      Map<String, Transportadoras> map0 = vintage0.getTransportadoras();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(2L);
      Utilizador utilizador0 = new Utilizador();
      hashMap0.put("~[c", utilizador0);
      Vintage vintage1 = null;
      try {
        vintage1 = new Vintage("", hashMap0, list0, map0, localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Utilizador utilizador0 = new Utilizador();
      vintage0.adicionaUtilizador(utilizador0);
      // Undeclared exception!
      try { 
        vintage0.getUtilizadores();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      String string0 = vintage0.toString();
      assertEquals("----------------------------------------\n               VINTAGE                  \n----------------------------------------\nSess\u00E3o Atual: null\nUtilizadores: {}\nEncomendas: []\nTransportadoras: {}\nData do Programa: 2014-02-14\n", string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      // Undeclared exception!
      try { 
        vintage0.getMaiorVolFaturacao("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      List<Encomenda> list0 = vintage0.encomendasParaDevolver();
      Transportadoras transportadoras0 = new Transportadoras("BF`-e.q(kiPw/", (-1.0), (-1.0), true, (-1.0));
      LocalDate localDate0 = MockLocalDate.of(3451, 1, 1);
      vintage0.adicionarTransportadora(transportadoras0);
      Map<String, Utilizador> map0 = vintage0.getUtilizadores();
      Map<String, Transportadoras> map1 = vintage0.getTransportadorasPremium();
      Vintage vintage1 = new Vintage("f=M;fCg", map0, list0, map1, localDate0);
      assertFalse(map1.isEmpty());
      assertEquals(1, map1.size());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Period period0 = Period.ofWeeks(0);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      Sapatilhas.Tipos_Sapatilhas sapatilhas_Tipos_Sapatilhas0 = Sapatilhas.Tipos_Sapatilhas.NORMAL;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.NOVO;
      Artigo.Avaliacao artigo_Avaliacao0 = Artigo.Avaliacao.IMPECAVEL;
      Sapatilhas sapatilhas0 = new Sapatilhas(121, false, "9cfOR5uTR5JTxsTl", localDate0, sapatilhas_Tipos_Sapatilhas0, "p7 A~o{-;Ye", artigo_Estado0, (-3692), artigo_Avaliacao0, (String) null, "9cfOR5uTR5JTxsTl", "hEeA6Aos{", (-1.0), 1.0, "r)<vzqb");
      // Undeclared exception!
      try { 
        vintage0.adicionarPorVender(sapatilhas0, "Cf\"V~");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Encomenda encomenda0 = new Encomenda();
      vintage0.addEncomenda(encomenda0);
      List<Encomenda> list0 = vintage0.getEncomendasSessaoAtual();
      assertFalse(list0.contains(encomenda0));
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Clock clock0 = MockClock.systemUTC();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      vintage0.setDataPrograma(localDate0);
      assertNull(vintage0.getSessaoAtual());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      vintage0.SetSessaoAtual("IIIZ!<e`[W");
      assertEquals("IIIZ!<e`[W", vintage0.getSessaoAtual());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      HashMap<String, Utilizador> hashMap0 = new HashMap<String, Utilizador>();
      Vintage vintage0 = new Vintage();
      List<Encomenda> list0 = vintage0.getEncomendas();
      Map<String, Transportadoras> map0 = vintage0.getTransportadoras();
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      Clock clock0 = MockClock.tickMinutes(zoneOffset0);
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Vintage vintage1 = new Vintage("", hashMap0, list0, map0, localDate0);
      assertEquals("", vintage1.getSessaoAtual());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      // Undeclared exception!
      try { 
        vintage0.adicionaUtilizador((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Vintage vintage1 = new Vintage(vintage0);
      // Undeclared exception!
      try { 
        vintage1.equals(vintage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      // Undeclared exception!
      try { 
        vintage0.getMaiorFaturacaoSempre("K");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      // Undeclared exception!
      try { 
        vintage0.getTransportadora("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }
}
