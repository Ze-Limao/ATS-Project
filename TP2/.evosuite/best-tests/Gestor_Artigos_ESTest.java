/*
 * This file was automatically generated by EvoSuite
 * Thu May 02 10:25:17 GMT 2024
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.Charset;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Gestor_Artigos_ESTest extends Gestor_Artigos_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Long long0 = new Long(0L);
      String string0 = gestor_Artigos0.criar_artigo_sapatilhas("", "\n", 0.0, false, 0, 0, long0, 0, 2781, true, "\n", (-1868), false, 0.0);
      assertEquals("A1", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Boolean boolean0 = new Boolean("TS[<.FMtf'O");
      gestor_Artigos0.criar_artigo_mala("TS[<.FMtf'O", "TS[<.FMtf'O", 0.0, true, (-4115), (-4115), (-4115), 1787L, 143, "TS[<.FMtf'O", 1, boolean0, 1);
      String string0 = gestor_Artigos0.pesquisar_artigos_ano_colecao(3);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Boolean boolean0 = Boolean.valueOf("=XK-nv!i");
      gestor_Artigos0.criar_artigo_mala("", "fg6?jXnmo\"$,c!p+dl", 0.0, true, (-671), (-671), (-671), 2470L, (-1541), "=XK-nv!i", (-1789569705), boolean0, 324.7718F);
      String string0 = gestor_Artigos0.pesquisar_artigos_dimensão_mala(1047);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Long long0 = new Long((-1));
      gestor_Artigos0.criar_artigo_sapatilhas("!wV39a8V3:RX|X", "!wV39a8V3:RX|X", (-0.1539), false, (-1), 0, long0, 0, (-1), false, "!wV39a8V3:RX|X", (-1), false, 1158.0);
      String string0 = gestor_Artigos0.pesquipesquisar_artigos_tamanho_sapatilhas(1523);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Boolean boolean0 = Boolean.valueOf(false);
      gestor_Artigos0.criar_artigo_mala("TS[<.FMtf'O", "TS[<.FMtf'O", 0.0, true, (-4115), (-4115), (-4115), 1787L, 143, "TS[<.FMtf'O", 1, boolean0, 1);
      gestor_Artigos0.alteraDataToInicio("A1");
      assertEquals(0.5, gestor_Artigos0.getTaxaNovo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Boolean boolean0 = new Boolean(false);
      gestor_Artigos0.criar_artigo_mala((String) null, (String) null, 0.0, false, 4807, (-752), 4807, 4807, 4807, "<LC1", 0, boolean0, (-1158.7793F));
      long long0 = gestor_Artigos0.tirar_disponivel_artigo("A1");
      assertEquals(4807L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Long long0 = new Long((-1009));
      gestor_Artigos0.criar_artigo_sapatilhas("BKi", " n\u00E3o existe!", 1591.482, true, (-1009), (-1009), long0, (-1009), (-1), true, "Finalizada", (-1), true, 1591.482);
      Long long1 = gestor_Artigos0.id_artigo_para_id_vendedor("A1");
      assertEquals((-1009L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Boolean boolean0 = new Boolean(true);
      gestor_Artigos0.criar_artigo_mala("TS[<.FMtf'O", "TS[<.FMtf'O", 0.0, true, (-4115), (-4115), (-4115), 1787L, 143, "TS[<.FMtf'O", 1, boolean0, 1);
      Long long0 = gestor_Artigos0.id_artigo_para_id_vendedor("A1");
      assertEquals(1787L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Long long0 = new Long((-1));
      gestor_Artigos0.criar_artigo_sapatilhas("!wV39a8V3:RX|X", "!wV39a8V3:RX|X", (-0.1539), false, (-1), 0, long0, 0, (-1), false, "!wV39a8V3:RX|X", (-1), false, 1158.0);
      Long long1 = Long.valueOf(1248L);
      gestor_Artigos0.criar_artigo_sapatilhas("", " C\u00F3digo de barras: ", 0.0, false, (-639), 5, long1, 1248L, (-1), false, "", (-639), false, (-1));
      Long long2 = gestor_Artigos0.id_artigo_para_id_transportadora("A2");
      assertEquals(1248L, (long)long2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Long long0 = new Long((-1));
      gestor_Artigos0.criar_artigo_sapatilhas("!wV39a8V3:RX|X", "!wV39a8V3:RX|X", (-0.1539), false, (-1), 0, long0, 0, (-1), false, "!wV39a8V3:RX|X", (-1), false, 1158.0);
      gestor_Artigos0.criar_artigo_sapatilhas("", " C\u00F3digo de barras: ", 0.0, false, (-639), 5, long0, 1248L, (-1), false, "", (-639), false, (-1));
      Long long1 = gestor_Artigos0.id_artigo_para_id_transportadora("A2");
      assertEquals((-1L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Gestor_Artigos.setTaxaUsado((-39.25842807));
      double double0 = Gestor_Artigos.getTaxaUsado();
      assertEquals((-39.25842807), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Gestor_Artigos.setTaxaNovo(0.0);
      double double0 = Gestor_Artigos.getTaxaNovo();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Boolean boolean0 = new Boolean("'x");
      gestor_Artigos0.criar_artigo_mala("O artigo ", "!wV39a8V3:RX|X", 1313.49066, true, (-1), 808, 0, 0L, 808, "Artigo invalido", (-1015), boolean0, 0.0F);
      long long0 = gestor_Artigos0.colocar_disponivel_artigo("A1");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Long long0 = new Long(556);
      Tamanho tamanho0 = Tamanho.L;
      Padrao padrao0 = Padrao.palmeiras;
      gestor_Artigos0.criar_artigo_tshirt("0", "0", 83.444, true, 556, 556, 556, long0, tamanho0, padrao0);
      long long1 = gestor_Artigos0.colocar_disponivel_artigo("A1");
      assertEquals(556L, long1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Long long0 = new Long((-1190));
      Tamanho tamanho0 = Tamanho.L;
      Padrao padrao0 = Padrao.liso;
      gestor_Artigos0.criar_artigo_tshirt("", "", (-3501.7397196), false, (-1190), (-1190), (-1190), long0, tamanho0, padrao0);
      String string0 = gestor_Artigos0.artigoToString("A1");
      assertEquals("T-shirt:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o:  Marca:  Pre\u00E7o base: -3501.7397196 Novo: false Estado de uso: -1190 N\u00FAmero de utilizadores: -1190 Disponivel: true Id da transportadora: -1190 Id do vendedor: -1190 } Tamanho: L Padr\u00E3o: liso}", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Long long0 = new Long((-1156));
      Tamanho tamanho0 = Tamanho.L;
      Padrao padrao0 = Padrao.liso;
      gestor_Artigos0.criar_artigo_tshirt("", "", (-3501.7397196), false, (-1156), (-702), (-1156), long0, tamanho0, padrao0);
      // Undeclared exception!
      try { 
        gestor_Artigos0.pesquisar_artigos_novo_tshirt((Boolean) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Artigos", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos((Map<Integer, Artigo>) null);
      Long long0 = new Long((-149L));
      gestor_Artigos0.criar_artigo_sapatilhas((String) null, (String) null, 0.0, false, (-421), (-1908874352), long0, 0L, (-4408), true, "tvA#", (-421), true, 0.0);
      // Undeclared exception!
      try { 
        gestor_Artigos0.pesquisar_artigos_marca_sapatilha("tvA#");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Boolean boolean0 = new Boolean(false);
      gestor_Artigos0.criar_artigo_mala((String) null, (String) null, 0.0, false, 4807, (-752), 4807, 4807, 4807, "<LC1", 0, boolean0, (-1158.7793F));
      // Undeclared exception!
      try { 
        gestor_Artigos0.pesquisar_artigos_marca_mala("M");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Long long0 = new Long((-1009));
      gestor_Artigos0.criar_artigo_sapatilhas("BKi", " n\u00E3o existe!", 1591.4819721209, true, (-1009), (-1009), long0, (-1009), (-1), true, "Finalizada", (-1), true, 1591.4819721209);
      // Undeclared exception!
      try { 
        gestor_Artigos0.mostrar_gestor((LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Sapatilha", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      // Undeclared exception!
      try { 
        gestor_Artigos0.criar_artigo_sapatilhas("^%pf;mtjRCcXmg\"ko ", "^%pf;mtjRCcXmg\"ko ", 0.0, true, 1548, (-1), (Long) null, 1548, 1548, true, (String) null, 0, true, (-1.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Artigo", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      // Undeclared exception!
      try { 
        gestor_Artigos0.criar_artigo_mala("}]MXyW)}W~)`R4ZP\"K5", "TQh=+%)isgN|A&r]A", 1568.3, true, 2721, 0, 0, 2328L, 2721, "", 2721, (Boolean) null, 2328L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Artigos", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = null;
      try {
        gestor_Artigos0 = new Gestor_Artigos((Gestor_Artigos) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Artigos", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add((String) null);
      Mala mala0 = new Mala();
      LocalDate localDate0 = mala0.getData_venda();
      // Undeclared exception!
      try { 
        gestor_Artigos0.entreDatas(linkedHashSet0, localDate0, localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Artigos", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Encomenda encomenda0 = new Encomenda();
      Set<String> set0 = encomenda0.removeTudo();
      LocalDate localDate0 = MockLocalDate.now();
      int int0 = gestor_Artigos0.entreDatas(set0, localDate0, localDate0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Long long0 = new Long((-1190));
      Tamanho tamanho0 = Tamanho.L;
      Padrao padrao0 = Padrao.liso;
      gestor_Artigos0.criar_artigo_tshirt("", "", (-3501.7397196), false, (-1190), (-702), (-1190), long0, tamanho0, padrao0);
      double double0 = gestor_Artigos0.vintageFaturou();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      LocalDate localDate0 = MockLocalDate.of(3062, 10, 4);
      // Undeclared exception!
      try { 
        gestor_Artigos0.precoFaturouTempo(set0, localDate0, localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Artigos", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Encomenda encomenda0 = new Encomenda();
      Set<String> set0 = encomenda0.removeTudo();
      LocalDate localDate0 = MockLocalDate.now();
      double double0 = gestor_Artigos0.precoFaturouTempo(set0, localDate0, localDate0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      // Undeclared exception!
      try { 
        gestor_Artigos0.precoFaturou(set0, localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Artigos", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Encomenda encomenda0 = new Encomenda();
      Set<String> set0 = encomenda0.removeTudo();
      LocalDate localDate0 = MockLocalDate.now();
      double double0 = gestor_Artigos0.precoFaturou(set0, localDate0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      LocalDate localDate0 = MockLocalDate.now();
      // Undeclared exception!
      try { 
        gestor_Artigos0.vendaTotal(set0, localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Artigos", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      LocalDate localDate0 = MockLocalDate.now();
      double double0 = gestor_Artigos0.vendaTotal(linkedHashSet0, localDate0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Encomenda encomenda0 = new Encomenda();
      encomenda0.adicionaArtigo("mt");
      // Undeclared exception!
      try { 
        gestor_Artigos0.alteraData(encomenda0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Artigos", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Encomenda encomenda0 = new Encomenda();
      gestor_Artigos0.alteraData(encomenda0);
      assertEquals(0.25, gestor_Artigos0.getTaxaUsado(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Long long0 = new Long((-1009));
      gestor_Artigos0.criar_artigo_sapatilhas("BKi", " n\u00E3o existe!", 1591.4819721209, true, (-1009), (-1009), long0, (-1009), (-1), true, "Finalizada", (-1), true, 1591.4819721209);
      long long1 = gestor_Artigos0.colocar_disponivel_artigo("A1");
      assertEquals((-1009L), long1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      try { 
        gestor_Artigos0.colocar_disponivel_artigo("Sapatilhas:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: BKi Marca:  n\u00E3o existe! Pre\u00E7o base: 1591.4819721209 Novo: true Estado de uso: -1009 N\u00FAmero de utilizadores: -1009 Disponivel: true Id da transportadora: -1009 Id do vendedor: -1009 } Tamanho: -1 Atacadores: true Cor: Finalizada Data da Cole\u00E7\u00E3o: -1 Premium: true Desconto: 1591.4819721209}\n");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo Sapatilhas:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: BKi Marca:  n\u00E3o existe! Pre\u00E7o base: 1591.4819721209 Novo: true Estado de uso: -1009 N\u00FAmero de utilizadores: -1009 Disponivel: true Id da transportadora: -1009 Id do vendedor: -1009 } Tamanho: -1 Atacadores: true Cor: Finalizada Data da Cole\u00E7\u00E3o: -1 Premium: true Desconto: 1591.4819721209}
         //  n\u00E3o existe!
         //
         verifyException("Gestor_Artigos", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      try { 
        gestor_Artigos0.tirar_disponivel_artigo("#OVa6&~4|j");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo #OVa6&~4|j n\u00E3o existe!
         //
         verifyException("Gestor_Artigos", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Long long0 = new Long((-1190));
      Tamanho tamanho0 = Tamanho.L;
      Padrao padrao0 = Padrao.liso;
      String string0 = gestor_Artigos0.criar_artigo_tshirt("", "", (-3501.7397196), false, (-1190), (-702), (-1190), long0, tamanho0, padrao0);
      String string1 = gestor_Artigos0.pesquisar_artigos_ano_colecao((-1190));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Boolean boolean0 = Boolean.TRUE;
      gestor_Artigos0.criar_artigo_mala(" Id do vendedor: ", ",5wDnt4y\"r>jKayHv(", 0.0, true, 3146, 1315, 3146, (-1570L), 5164, " Id do vendedor: ", 5164, boolean0, 0.0F);
      String string0 = gestor_Artigos0.pesquisar_artigos_ano_colecao((-594));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Boolean boolean0 = new Boolean("TS[<.FMtf'O");
      gestor_Artigos0.criar_artigo_mala("TS[<.FMtf'O", "TS[<.FMtf'O", 1787L, true, (-4115), (-4115), (-4115), 1787L, 143, "TS[<.FMtf'O", 1, boolean0, 1);
      String string0 = gestor_Artigos0.pesquisar_artigos_material("TS[<.FMtf'O");
      assertEquals("Mala:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: TS[<.FMtf'O Marca: TS[<.FMtf'O Pre\u00E7o base: 1787.0 Novo: true Estado de uso: -4115 N\u00FAmero de utilizadores: -4115 Disponivel: true Id da transportadora: -4115 Id do vendedor: 1787 } Dimens\u00E3o: 143 Material: TS[<.FMtf'O Ano da Cole\u00E7\u00E3o: 1 Premium: false Valoriza\u00E7\u00E3o: 1.0}\n", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Long long0 = new Long((-1916312819));
      String string0 = gestor_Artigos0.criar_artigo_sapatilhas("e|1^_Z_@lFA589^6", "-o", 182.8183126215444, false, (-1916312819), (-1916312819), long0, (-1916312819), (-1916312819), false, "e|1^_Z_@lFA589^6", 3, false, (-1916312819));
      String string1 = gestor_Artigos0.pesquisar_artigos_material(",,)");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Boolean boolean0 = new Boolean("TS[<.FMtf'O");
      gestor_Artigos0.criar_artigo_mala("TS[<.FMtf'O", "TS[<.FMtf'O", 0.0, true, (-4115), (-4115), (-4115), 1787L, 143, "TS[<.FMtf'O", 1, boolean0, 1);
      String string0 = gestor_Artigos0.pesquisar_artigos_material(" Padr\u00E3o: ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Long long0 = new Long((-1190));
      Tamanho tamanho0 = Tamanho.L;
      Padrao padrao0 = Padrao.liso;
      gestor_Artigos0.criar_artigo_tshirt("", "", (-3501.7397196), false, (-1190), (-702), (-1190), long0, tamanho0, padrao0);
      Padrao padrao1 = Padrao.palmeiras;
      String string0 = gestor_Artigos0.pesquisar_artigos_padrao(padrao1);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Long long0 = new Long((-1156));
      Tamanho tamanho0 = Tamanho.L;
      Padrao padrao0 = Padrao.liso;
      gestor_Artigos0.criar_artigo_tshirt("", "", (-3501.7397196), false, (-1156), (-702), (-1156), long0, tamanho0, padrao0);
      gestor_Artigos0.tirar_disponivel_artigo("A1");
      String string0 = gestor_Artigos0.pesquisar_artigos_padrao(padrao0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Padrao padrao0 = Padrao.liso;
      Long long0 = new Long((-1));
      gestor_Artigos0.criar_artigo_sapatilhas("!wV39a8V3:RX|X", "!wV39a8V3:RX|X", (-0.1539), true, (-1), 0, long0, 0, (-1), true, "-o", (-1), true, 1158.0);
      String string0 = gestor_Artigos0.pesquisar_artigos_padrao(padrao0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Long long0 = new Long((-1190));
      Tamanho tamanho0 = Tamanho.L;
      Padrao padrao0 = Padrao.liso;
      gestor_Artigos0.criar_artigo_tshirt("", "", (-3501.7397196), false, (-1190), (-702), (-1190), long0, tamanho0, padrao0);
      String string0 = gestor_Artigos0.pesquisar_artigos_padrao(padrao0);
      assertEquals("T-shirt:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o:  Marca:  Pre\u00E7o base: -3501.7397196 Novo: false Estado de uso: -1190 N\u00FAmero de utilizadores: -702 Disponivel: true Id da transportadora: -1190 Id do vendedor: -1190 } Tamanho: L Padr\u00E3o: liso}\n", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Long long0 = new Long((-1));
      gestor_Artigos0.criar_artigo_sapatilhas("!wV39a8V3:RX|X", "!wV39a8V3:RX|X", (-0.1539), false, (-1), 0, long0, 0, (-1), false, "!wV39a8V3:RX|X", (-1), false, 1158.0);
      String string0 = gestor_Artigos0.pesquisar_artigos_cor("!wV39a8V3:RX|X");
      assertEquals("Sapatilhas:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: !wV39a8V3:RX|X Marca: !wV39a8V3:RX|X Pre\u00E7o base: -0.1539 Novo: false Estado de uso: -1 N\u00FAmero de utilizadores: 0 Disponivel: true Id da transportadora: -1 Id do vendedor: 0 } Tamanho: -1 Atacadores: false Cor: !wV39a8V3:RX|X Data da Cole\u00E7\u00E3o: -1 Premium: false Desconto: 1158.0}\n", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      HashMap<String, Artigo> hashMap0 = new HashMap<String, Artigo>();
      Sapatilha sapatilha0 = new Sapatilha();
      hashMap0.put("liso", sapatilha0);
      gestor_Artigos0.setArtigos(hashMap0);
      String string0 = gestor_Artigos0.pesquisar_artigos_cor("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Long long0 = new Long((-1));
      Tamanho tamanho0 = Tamanho.S;
      Padrao padrao0 = Padrao.palmeiras;
      String string0 = gestor_Artigos0.criar_artigo_tshirt(" Id da transportadora: ", "0", 0.5, true, (-1), (-1), (-1), long0, tamanho0, padrao0);
      String string1 = gestor_Artigos0.pesquisar_artigos_cor("^&<!:5RKV");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Padrao padrao0 = Padrao.riscas;
      Long long0 = new Long((-1508L));
      Tamanho tamanho0 = Tamanho.L;
      gestor_Artigos0.criar_artigo_tshirt("", "", 0.5, false, 0, 0, (-1508L), long0, tamanho0, padrao0);
      Tamanho tamanho1 = Tamanho.M;
      String string0 = gestor_Artigos0.pesquipesquisar_artigos_tamanho__tshit(tamanho1);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Long long0 = new Long((-1156));
      Tamanho tamanho0 = Tamanho.L;
      Padrao padrao0 = Padrao.liso;
      gestor_Artigos0.criar_artigo_tshirt("", "", (-3501.7397196), false, (-1156), (-702), (-1156), long0, tamanho0, padrao0);
      gestor_Artigos0.tirar_disponivel_artigo("A1");
      String string0 = gestor_Artigos0.pesquipesquisar_artigos_tamanho__tshit(tamanho0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Long long0 = new Long((-1));
      Tamanho tamanho0 = Tamanho.S;
      Padrao padrao0 = Padrao.palmeiras;
      gestor_Artigos0.criar_artigo_tshirt(" Id da transportadora: ", "0", 0.5, true, (-1), (-1), (-1), long0, tamanho0, padrao0);
      String string0 = gestor_Artigos0.pesquipesquisar_artigos_tamanho__tshit(tamanho0);
      assertEquals("T-shirt:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o:  Id da transportadora:  Marca: 0 Pre\u00E7o base: 0.5 Novo: true Estado de uso: -1 N\u00FAmero de utilizadores: -1 Disponivel: true Id da transportadora: -1 Id do vendedor: -1 } Tamanho: S Padr\u00E3o: palmeiras}\n", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Long long0 = new Long((-1));
      Tamanho tamanho0 = Tamanho.S;
      String string0 = gestor_Artigos0.criar_artigo_sapatilhas("0", "^&<!:5RKV", (-1), false, (-1), (-1), long0, 2711L, 0, false, "0", (-1), false, 0.5);
      String string1 = gestor_Artigos0.pesquipesquisar_artigos_tamanho__tshit(tamanho0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Long long0 = new Long((-1009));
      gestor_Artigos0.criar_artigo_sapatilhas("BKi", " n\u00E3o existe!", 1591.4819721209, true, (-1009), (-1009), long0, (-1009), (-1), true, "Finalizada", (-1), true, 1591.4819721209);
      String string0 = gestor_Artigos0.pesquipesquisar_artigos_tamanho_sapatilhas((-1));
      assertEquals("Sapatilhas:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: BKi Marca:  n\u00E3o existe! Pre\u00E7o base: 1591.4819721209 Novo: true Estado de uso: -1009 N\u00FAmero de utilizadores: -1009 Disponivel: true Id da transportadora: -1009 Id do vendedor: -1009 } Tamanho: -1 Atacadores: true Cor: Finalizada Data da Cole\u00E7\u00E3o: -1 Premium: true Desconto: 1591.4819721209}\n", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Long long0 = new Long((-1009));
      gestor_Artigos0.criar_artigo_sapatilhas("BKi", " n\u00E3o existe!", 1591.4819721209, true, (-1009), (-1009), long0, (-1009), (-1), true, "Finalizada", (-1), true, 1591.4819721209);
      String string0 = gestor_Artigos0.pesquipesquisar_artigos_tamanho_sapatilhas((-1009));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Boolean boolean0 = Boolean.TRUE;
      String string0 = gestor_Artigos0.criar_artigo_mala(" Id do vendedor: ", ",5wDnt4y\"r>jKayHv(", 0.0, true, 3146, 1315, 3146, (-1570L), 5164, " Id do vendedor: ", 5164, boolean0, 0.0F);
      String string1 = gestor_Artigos0.pesquipesquisar_artigos_tamanho_sapatilhas((-594));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Boolean boolean0 = new Boolean(false);
      gestor_Artigos0.criar_artigo_mala((String) null, (String) null, 0.0, false, 4807, (-752), 4807, 4807, 4807, "<LC1", 0, boolean0, (-1158.7793F));
      String string0 = gestor_Artigos0.pesquisar_artigos_novo_mala(boolean0);
      assertEquals("Mala:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: null Marca: null Pre\u00E7o base: 0.0 Novo: false Estado de uso: 4807 N\u00FAmero de utilizadores: -752 Disponivel: true Id da transportadora: 4807 Id do vendedor: 4807 } Dimens\u00E3o: 4807 Material: <LC1 Ano da Cole\u00E7\u00E3o: 0 Premium: false Valoriza\u00E7\u00E3o: -1158.7793}\n", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Boolean boolean0 = new Boolean("TS[<.FMtf'O");
      gestor_Artigos0.criar_artigo_mala("TS[<.FMtf'O", "TS[<.FMtf'O", 0.0, true, (-4115), (-4115), (-4115), 1787L, 143, "TS[<.FMtf'O", 1, boolean0, 1);
      String string0 = gestor_Artigos0.pesquisar_artigos_novo_mala(boolean0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Long long0 = new Long((-1190L));
      gestor_Artigos0.criar_artigo_sapatilhas(" Premium: ", " Premium: ", (-1.0), false, 991, 991, long0, 0L, 991, false, " Premium: ", 509, false, 1183.1);
      Boolean boolean0 = new Boolean("A");
      String string0 = gestor_Artigos0.pesquisar_artigos_novo_mala(boolean0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Long long0 = new Long(278L);
      Tamanho tamanho0 = Tamanho.XL;
      Padrao padrao0 = Padrao.palmeiras;
      gestor_Artigos0.criar_artigo_tshirt("", "9;u^ND2d!y.qk@i", 0.01, true, (-2727), 1455, 1455, long0, tamanho0, padrao0);
      Boolean boolean0 = new Boolean("pG867");
      String string0 = gestor_Artigos0.pesquisar_artigos_novo_tshirt(boolean0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Long long0 = new Long((-1156));
      Tamanho tamanho0 = Tamanho.L;
      Padrao padrao0 = Padrao.liso;
      gestor_Artigos0.criar_artigo_tshirt("", "", (-3501.7397196), false, (-1156), (-702), (-1156), long0, tamanho0, padrao0);
      gestor_Artigos0.tirar_disponivel_artigo("A1");
      String string0 = gestor_Artigos0.pesquisar_artigos_novo_tshirt((Boolean) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Long long0 = new Long((-1));
      String string0 = gestor_Artigos0.criar_artigo_sapatilhas("!wV39a8V3:RX|X", "!wV39a8V3:RX|X", (-0.1539), true, (-1), 0, long0, 0, (-1), true, "-o", (-1), true, 1158.0);
      Boolean boolean0 = Boolean.FALSE;
      String string1 = gestor_Artigos0.pesquisar_artigos_novo_tshirt(boolean0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Long long0 = new Long((-1190));
      Tamanho tamanho0 = Tamanho.L;
      Padrao padrao0 = Padrao.liso;
      gestor_Artigos0.criar_artigo_tshirt("", "", (-3501.7397196), false, (-1190), (-702), (-1190), long0, tamanho0, padrao0);
      Boolean boolean0 = Boolean.valueOf(false);
      String string0 = gestor_Artigos0.pesquisar_artigos_novo_tshirt(boolean0);
      assertEquals("T-shirt:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o:  Marca:  Pre\u00E7o base: -3501.7397196 Novo: false Estado de uso: -1190 N\u00FAmero de utilizadores: -702 Disponivel: true Id da transportadora: -1190 Id do vendedor: -1190 } Tamanho: L Padr\u00E3o: liso}\n", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Long long0 = new Long((-1));
      gestor_Artigos0.criar_artigo_sapatilhas("!wV39a8V3:RX|X", "!wV39a8V3:RX|X", (-0.1539), false, (-1), 0, long0, 0, (-1), false, "!wV39a8V3:RX|X", (-1), false, 1158.0);
      Boolean boolean0 = Boolean.FALSE;
      String string0 = gestor_Artigos0.pesquisar_artigos_novo_sapatilhas(boolean0);
      assertEquals("Sapatilhas:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: !wV39a8V3:RX|X Marca: !wV39a8V3:RX|X Pre\u00E7o base: -0.1539 Novo: false Estado de uso: -1 N\u00FAmero de utilizadores: 0 Disponivel: true Id da transportadora: -1 Id do vendedor: 0 } Tamanho: -1 Atacadores: false Cor: !wV39a8V3:RX|X Data da Cole\u00E7\u00E3o: -1 Premium: false Desconto: 1158.0}\n", string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Long long0 = new Long((-1));
      gestor_Artigos0.criar_artigo_sapatilhas("!wV39a8V3:RX|X", "!wV39a8V3:RX|X", (-0.1539), true, (-1), 0, long0, 0, (-1), true, "-o", (-1), true, 1158.0);
      Boolean boolean0 = Boolean.FALSE;
      String string0 = gestor_Artigos0.pesquisar_artigos_novo_sapatilhas(boolean0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Long long0 = new Long((-1190));
      Tamanho tamanho0 = Tamanho.L;
      Padrao padrao0 = Padrao.liso;
      gestor_Artigos0.criar_artigo_tshirt("", "", (-3501.7397196), false, (-1190), (-702), (-1190), long0, tamanho0, padrao0);
      Boolean boolean0 = Boolean.valueOf(false);
      String string0 = gestor_Artigos0.pesquisar_artigos_novo_sapatilhas(boolean0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Boolean boolean0 = new Boolean("TS[<.FMtf'O");
      gestor_Artigos0.criar_artigo_mala("TS[<.FMtf'O", "TS[<.FMtf'O", 0.0, true, (-4115), (-4115), (-4115), 1787L, 143, "TS[<.FMtf'O", 1, boolean0, 1);
      String string0 = gestor_Artigos0.pesquisar_artigos_marca_mala("A1");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Long long0 = new Long((-1156));
      Tamanho tamanho0 = Tamanho.L;
      Padrao padrao0 = Padrao.liso;
      String string0 = gestor_Artigos0.criar_artigo_tshirt("", "", (-3501.7397196), false, (-1156), (-702), (-1156), long0, tamanho0, padrao0);
      String string1 = gestor_Artigos0.pesquisar_artigos_marca_mala("");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos((Map<Integer, Artigo>) null);
      Long long0 = new Long(563L);
      Tamanho tamanho0 = Tamanho.L;
      Padrao padrao0 = Padrao.palmeiras;
      gestor_Artigos0.criar_artigo_tshirt("", "", 75.53116365166534, true, 2272, 2272, 0L, long0, tamanho0, padrao0);
      String string0 = gestor_Artigos0.pesquisar_artigos_marca_tshirt("");
      assertEquals("T-shirt:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o:  Marca:  Pre\u00E7o base: 75.53116365166534 Novo: true Estado de uso: 2272 N\u00FAmero de utilizadores: 2272 Disponivel: true Id da transportadora: 0 Id do vendedor: 563 } Tamanho: L Padr\u00E3o: palmeiras}\n", string0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Long long0 = new Long((-1156));
      Tamanho tamanho0 = Tamanho.L;
      Padrao padrao0 = Padrao.liso;
      gestor_Artigos0.criar_artigo_tshirt("", "", (-3501.7397196), false, (-1156), (-702), (-1156), long0, tamanho0, padrao0);
      gestor_Artigos0.tirar_disponivel_artigo("A1");
      String string0 = gestor_Artigos0.pesquisar_artigos_marca_tshirt("A1");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Long long0 = new Long((-1));
      Tamanho tamanho0 = Tamanho.S;
      Padrao padrao0 = Padrao.palmeiras;
      gestor_Artigos0.criar_artigo_tshirt(" Id da transportadora: ", "0", 0.5, true, (-1), (-1), (-1), long0, tamanho0, padrao0);
      String string0 = gestor_Artigos0.pesquisar_artigos_marca_tshirt("[-o");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Boolean boolean0 = Boolean.TRUE;
      gestor_Artigos0.criar_artigo_mala(" Id do vendedor: ", ",5wDnt4y\"r>jKayHv(", 0.0, true, 3146, 1315, 3146, (-1570L), 5164, " Id do vendedor: ", 5164, boolean0, 0.0F);
      String string0 = gestor_Artigos0.pesquisar_artigos_marca_tshirt("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Long long0 = new Long(2);
      gestor_Artigos0.criar_artigo_sapatilhas("", "^&<!:5RKV", 2, false, 2, (-2734), long0, 2711L, 0, false, "", 2, false, 0.5);
      String string0 = gestor_Artigos0.pesquisar_artigos_marca_sapatilha("^&<!:5RKV");
      assertEquals("Sapatilhas:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o:  Marca: ^&<!:5RKV Pre\u00E7o base: 2.0 Novo: false Estado de uso: 2 N\u00FAmero de utilizadores: -2734 Disponivel: true Id da transportadora: 2 Id do vendedor: 2711 } Tamanho: 0 Atacadores: false Cor:  Data da Cole\u00E7\u00E3o: 2 Premium: false Desconto: 0.5}\n", string0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Long long0 = new Long((-1));
      gestor_Artigos0.criar_artigo_sapatilhas("!wV39a8V3:RX|X", "!wV39a8V3:RX|X", (-0.1539), true, (-1), 0, long0, 0, (-1), true, "-o", (-1), true, 1158.0);
      String string0 = gestor_Artigos0.pesquisar_artigos_marca_sapatilha("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Long long0 = new Long((-1156));
      Tamanho tamanho0 = Tamanho.L;
      Padrao padrao0 = Padrao.liso;
      gestor_Artigos0.criar_artigo_tshirt("", "", (-3501.7397196), false, (-1156), (-702), (-1156), long0, tamanho0, padrao0);
      String string0 = gestor_Artigos0.pesquisar_artigos_marca_sapatilha("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Gestor_Artigos gestor_Artigos1 = new Gestor_Artigos();
      boolean boolean0 = gestor_Artigos0.equals(gestor_Artigos1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      boolean boolean0 = gestor_Artigos0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      boolean boolean0 = gestor_Artigos0.equals(gestor_Artigos0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Padrao padrao0 = Padrao.palmeiras;
      boolean boolean0 = gestor_Artigos0.equals(padrao0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      boolean boolean0 = gestor_Artigos0.pesquisar_artigo_id("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Long long0 = new Long((-1009));
      gestor_Artigos0.criar_artigo_sapatilhas("BKi", " n\u00E3o existe!", 1591.4819721209, true, (-1009), (-1009), long0, (-1009), (-1), true, "Finalizada", (-1), true, 1591.4819721209);
      boolean boolean0 = gestor_Artigos0.pesquisar_artigo_id("A1");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Long long0 = new Long((-1009));
      gestor_Artigos0.criar_artigo_sapatilhas("BKi", " n\u00E3o existe!", 1591.4819721209, true, (-1009), (-1009), long0, (-1009), (-1), true, "Finalizada", (-1), true, 1591.4819721209);
      LocalDate localDate0 = MockLocalDate.now();
      String string0 = gestor_Artigos0.mostrar_gestor(localDate0);
      assertEquals("Sapatilhas:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: BKi Marca:  n\u00E3o existe! Pre\u00E7o base: 1591.4819721209 Novo: true Estado de uso: -1009 N\u00FAmero de utilizadores: -1009 Disponivel: true Id da transportadora: -1009 Id do vendedor: -1009 } Tamanho: -1 Atacadores: true Cor: Finalizada Data da Cole\u00E7\u00E3o: -1 Premium: true Desconto: 1591.4819721209} Pre\u00E7o atual: 322275.10\u20AC \n\n", string0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      LocalDate localDate0 = MockLocalDate.now();
      String string0 = gestor_Artigos0.mostrar_gestor(localDate0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Long long0 = new Long((-1156));
      Tamanho tamanho0 = Tamanho.L;
      Padrao padrao0 = Padrao.liso;
      gestor_Artigos0.criar_artigo_tshirt("", "", (-3501.7397196), false, (-1156), (-702), (-1156), long0, tamanho0, padrao0);
      gestor_Artigos0.tirar_disponivel_artigo("A1");
      String string0 = gestor_Artigos0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Long long0 = new Long((-1009));
      gestor_Artigos0.criar_artigo_sapatilhas("BKi", " n\u00E3o existe!", 1591.4819721209, true, (-1009), (-1009), long0, (-1009), (-1), true, "Finalizada", (-1), true, 1591.4819721209);
      String string0 = gestor_Artigos0.toString();
      assertEquals("Sapatilhas:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: BKi Marca:  n\u00E3o existe! Pre\u00E7o base: 1591.4819721209 Novo: true Estado de uso: -1009 N\u00FAmero de utilizadores: -1009 Disponivel: true Id da transportadora: -1009 Id do vendedor: -1009 } Tamanho: -1 Atacadores: true Cor: Finalizada Data da Cole\u00E7\u00E3o: -1 Premium: true Desconto: 1591.4819721209}\n", string0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Long long0 = new Long((-1009));
      gestor_Artigos0.criar_artigo_sapatilhas("BKi", " n\u00E3o existe!", 1591.4819721209, true, (-1009), (-1009), long0, (-1009), (-1), true, "Finalizada", (-1), true, 1591.4819721209);
      Map<String, Artigo> map0 = gestor_Artigos0.getArtigos();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Map<String, Artigo> map0 = gestor_Artigos0.getArtigos();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Boolean boolean0 = new Boolean("TS[<.FMtf'O");
      gestor_Artigos0.criar_artigo_mala("TS[<.FMtf'O", "TS[<.FMtf'O", 0.0, true, (-4115), (-4115), (-4115), 1787L, (-4115), "TS[<.FMtf'O", (-4115), boolean0, (-4115));
      String string0 = gestor_Artigos0.pesquisar_artigos_ano_colecao((-4115));
      assertEquals("Mala:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: TS[<.FMtf'O Marca: TS[<.FMtf'O Pre\u00E7o base: 0.0 Novo: true Estado de uso: -4115 N\u00FAmero de utilizadores: -4115 Disponivel: true Id da transportadora: -4115 Id do vendedor: 1787 } Dimens\u00E3o: -4115 Material: TS[<.FMtf'O Ano da Cole\u00E7\u00E3o: -4115 Premium: false Valoriza\u00E7\u00E3o: -4115.0}\n", string0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      double double0 = Gestor_Artigos.getTaxaNovo();
      assertEquals(0.5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      gestor_Artigos0.setArtigos((Map<String, Artigo>) null);
      // Undeclared exception!
      try { 
        gestor_Artigos0.pesquisar_artigos_marca_tshirt("Mala:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: Artigo invalido Marca: Artigo invalido Pre\u00E7o base: 0.0 Novo: false Estado de uso: -1 N\u00FAmero de utilizadores: -1 Disponivel: false Id da transportadora: -1 Id do vendedor: -1 Data de venda: 2014-02-15 } Dimens\u00E3o: 0 Material:  Ano da Cole\u00E7\u00E3o: 0 Premium: false Valoriza\u00E7\u00E3o: -375.611}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Artigos", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      // Undeclared exception!
      try { 
        gestor_Artigos0.id_artigo_para_id_transportadora("|D8^EKZEw[Z9:Jsk?U");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Artigos", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Gestor_Artigos.setTaxaUsado(0.0);
      double double0 = Gestor_Artigos.getTaxaUsado();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      double double0 = Gestor_Artigos.getTaxaUsado();
      assertEquals(0.25, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      // Undeclared exception!
      try { 
        gestor_Artigos0.artigoToString("Mala:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: TS[<.FMtf'O Marca: TS[<.FMtf'O Pre\u00E7o base: 0.0 Novo: true Estado de uso: -4115 N\u00FAmero de utilizadores: -4115 Disponivel: true Id da transportadora: -4115 Id do vendedor: 1787 } Dimens\u00E3o: -4115 Material: TS[<.FMtf'O Ano da Cole\u00E7\u00E3o: -4115 Premium: false Valoriza\u00E7\u00E3o: -4115.0}\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Artigos", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos((Map<Integer, Artigo>) null);
      // Undeclared exception!
      try { 
        gestor_Artigos0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Artigos", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Long long0 = new Long((-1));
      gestor_Artigos0.criar_artigo_sapatilhas("0", "^&<!:5RKV", (-1), false, (-1), (-1), long0, 2711L, 0, false, "0", (-1), false, 0.5);
      String string0 = gestor_Artigos0.pesquisar_artigos_cor("^&<!:5RKV");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Gestor_Artigos.setTaxaNovo((-2849.93453418));
      double double0 = Gestor_Artigos.getTaxaNovo();
      assertEquals((-2849.93453418), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      // Undeclared exception!
      try { 
        gestor_Artigos0.alteraDataToInicio("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Artigos", e);
      }
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Tamanho tamanho0 = Tamanho.XL;
      Padrao padrao0 = Padrao.palmeiras;
      // Undeclared exception!
      try { 
        gestor_Artigos0.criar_artigo_tshirt("p:\"z20Ylh;-}Ed(.", "p:\"z20Ylh;-}Ed(.", 0.0, true, (-995), (-995), (-995), (Long) null, tamanho0, padrao0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Artigo", e);
      }
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      // Undeclared exception!
      try { 
        gestor_Artigos0.id_artigo_para_id_vendedor("R:C*7*^4>_hTK_H");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Artigos", e);
      }
  }
}
