/*
 * This file was automatically generated by EvoSuite
 * Thu May 02 10:27:43 GMT 2024
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.Charset;
import java.time.Clock;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utilizador_ESTest extends Utilizador_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Long long0 = Long.getLong("Z@wp<w||F}J8", (-222L));
      Utilizador utilizador0 = new Utilizador("", " n\u00E3o foi comprada", "s+ztq;w", long0, "Z@wp<w||F}J8");
      utilizador0.adicionaFaturaVendedor(false, (-222L), (-1L), "s+ztq;w", (-222L), true, 0.0, (-1L));
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(" n\u00E3o foi comprada", utilizador0.getNome());
      assertEquals("s+ztq;w", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("Z@wp<w||F}J8", utilizador0.getPassword());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("", utilizador0.getEmail());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.adicionaFaturaVendedor(false, 1L, 2172L, "hJ1OWLTY*4$", 1L, false, 1L, (-1.0));
      utilizador0.adicionaFaturaVendedor(true, 1L, 1L, " n\u00E3o foi vendido", (-714.284886878747), false, 0.0, 0.0);
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getPassword());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Long long0 = new Long(147L);
      Utilizador utilizador0 = new Utilizador("Taxa Vintage: ", "Taxa Vintage: ", "Taxa Vintage: ", long0, "Taxa Vintage: ");
      Utilizador utilizador1 = new Utilizador(utilizador0);
      int int0 = utilizador1.compareTo(utilizador0);
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals(0, int0);
      assertEquals(1L, utilizador0.getId());
      assertEquals(0, utilizador1.getN_vendidos());
      assertEquals(147L, utilizador0.getNif());
      assertEquals(147L, utilizador1.getNif());
      assertEquals(2L, utilizador1.getCodigo());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador();
      utilizador1.equals(utilizador0);
      assertEquals(3L, utilizador0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.adicionaArtigo("");
      utilizador0.removeCarrinho();
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getPassword());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      utilizador0.numeroArtigos(set0);
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Long long0 = new Long((-2802L));
      Utilizador utilizador0 = new Utilizador("Taxa Vintage: ", (String) null, "C\u00F3digo: ", long0, "Taxa Vintage: ");
      utilizador0.insereNovoArtigo((String) null);
      assertEquals("C\u00F3digo: ", utilizador0.getMorada());
      assertEquals("Taxa Vintage: ", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("Taxa Vintage: ", utilizador0.getEmail());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_comprados());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.insereNovoArtigo("");
      utilizador0.getProdutosVender();
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getEmail());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Long long0 = new Long(2L);
      Utilizador utilizador0 = new Utilizador("[", "a,[penU=$jGSYxyy", "[", long0, "Taxa Vintage: ");
      String string0 = utilizador0.getPassword();
      assertEquals("a,[penU=$jGSYxyy", utilizador0.getNome());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("[", utilizador0.getMorada());
      assertEquals("Taxa Vintage: ", string0);
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("[", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Long long0 = new Long((-655L));
      Utilizador utilizador0 = new Utilizador((String) null, "", (String) null, long0, "");
      String string0 = utilizador0.getPassword();
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_comprados());
      assertNotNull(string0);
      assertEquals(0, utilizador0.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Long long0 = new Long(567L);
      Utilizador utilizador0 = new Utilizador("", (String) null, "< aSP", long0, "Taxa Vintage: ");
      String string0 = utilizador0.getNome();
      assertEquals("< aSP", utilizador0.getMorada());
      assertEquals("Taxa Vintage: ", utilizador0.getPassword());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_comprados());
      assertNull(string0);
      assertEquals("", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Long long0 = new Long(0L);
      Utilizador utilizador0 = new Utilizador("Grande", "Grande", "/,", long0, "EncomendaExistenteException");
      utilizador0.getNif();
      assertEquals("EncomendaExistenteException", utilizador0.getPassword());
      assertEquals("Grande", utilizador0.getNome());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("/,", utilizador0.getMorada());
      assertEquals("Grande", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Long long0 = new Long(2L);
      Utilizador utilizador0 = new Utilizador("[", "a,[penU=$jGSYxyy", "[", long0, "Taxa Vintage: ");
      long long1 = utilizador0.getNif();
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("a,[penU=$jGSYxyy", utilizador0.getNome());
      assertEquals("[", utilizador0.getMorada());
      assertEquals("Taxa Vintage: ", utilizador0.getPassword());
      assertEquals(2L, long1);
      assertEquals("[", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Long long0 = new Long((-2802L));
      Utilizador utilizador0 = new Utilizador("Taxa Vintage: ", (String) null, "C\u00F3digo: ", long0, "Taxa Vintage: ");
      utilizador0.setN_comprados(2188);
      int int0 = utilizador0.getN_comprados();
      assertEquals(2188, int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setN_comprados((-1));
      int int0 = utilizador0.getN_comprados();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      String string0 = utilizador0.getMorada();
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", string0);
      assertEquals("n/d", utilizador0.getEmail());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Long long0 = new Long(0L);
      Utilizador utilizador0 = new Utilizador("", "", "", long0, "");
      utilizador0.getMorada();
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(0, utilizador0.getN_comprados());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      assertEquals(1L, utilizador0.getId());
      
      utilizador0.setId(0L);
      utilizador0.getId();
      assertEquals("n/d", utilizador0.getMorada());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Long long0 = new Long((-1005L));
      Utilizador utilizador0 = new Utilizador("o4", "o4", "o4", long0, "o4");
      utilizador0.getFaturasVendas();
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(0, utilizador0.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      assertEquals("n/d", utilizador0.getEmail());
      
      utilizador0.setEmail("");
      utilizador0.getEmail();
      assertEquals(2L, utilizador0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.adicionaArtigo("");
      utilizador0.getCarrinho();
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Locale locale0 = Locale.CHINA;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Dimensao dimensao0 = Dimensao.Pequeno;
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(1);
      Clock clock0 = MockClock.tickMinutes(zoneOffset0);
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Encomenda encomenda0 = new Encomenda(set0, 0L, dimensao0, localDate0);
      utilizador0.setCarrinho(encomenda0);
      utilizador0.getCarrinho();
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getPassword());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Locale locale0 = Locale.CHINA;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Dimensao dimensao0 = Dimensao.Pequeno;
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(1);
      Clock clock0 = MockClock.tickMinutes(zoneOffset0);
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Encomenda encomenda0 = new Encomenda(set0, 22L, dimensao0, localDate0);
      utilizador0.setCarrinho(encomenda0);
      utilizador0.getCarrinho();
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.adicionaFaturaVendedor(false, 1L, 0L, "hJ1OWLTY*4$", 1L, false, 1L, (-1.0));
      Fatura fatura0 = utilizador0.get1FaturaVenda(1L);
      assertFalse(fatura0.compra);
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1.0, fatura0.alteracaoPreco, 0.01);
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(1L, fatura0.idEncomenda);
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(0L, fatura0.nifComprador);
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(1.0, fatura0.custoProdutos, 0.01);
      assertEquals(2.0, fatura0.precoFinal, 0.01);
      assertEquals(2L, utilizador0.getCodigo());
      assertNotNull(fatura0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Utilizador.setCodigo((-1L));
      Utilizador.criaCodigo();
      long long0 = Utilizador.getCodigo();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Long long0 = new Long(0L);
      Utilizador utilizador0 = new Utilizador("\u20AC\n", " Artigos: ", "Taxa Vintage: ", long0, "\u20AC\n");
      Utilizador utilizador1 = utilizador0.clone();
      assertEquals(1L, utilizador0.getId());
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals("\u20AC\n", utilizador1.getPassword());
      assertEquals("\u20AC\n", utilizador1.getEmail());
      assertNotSame(utilizador1, utilizador0);
      assertEquals(" Artigos: ", utilizador1.getNome());
      assertEquals(2L, utilizador1.getCodigo());
      assertEquals(0, utilizador1.getN_vendidos());
      assertEquals("Taxa Vintage: ", utilizador1.getMorada());
      assertEquals(1L, utilizador1.getId());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Long long0 = new Long(2L);
      Utilizador utilizador0 = new Utilizador("[", "a,[penU=$jGSYxyy", "[", long0, "Taxa Vintage: ");
      Utilizador utilizador1 = utilizador0.clone();
      assertEquals(2L, utilizador1.getCodigo());
      assertEquals(0, utilizador1.getN_vendidos());
      assertEquals("a,[penU=$jGSYxyy", utilizador1.getNome());
      assertEquals("[", utilizador1.getEmail());
      assertEquals(1L, utilizador0.getId());
      assertEquals(2L, utilizador1.getNif());
      assertNotSame(utilizador1, utilizador0);
      assertEquals("Taxa Vintage: ", utilizador1.getPassword());
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals(1L, utilizador1.getId());
      assertEquals(2L, utilizador0.getNif());
      assertEquals("[", utilizador1.getMorada());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      assertEquals(0, utilizador0.getN_comprados());
      
      utilizador0.setN_comprados(1);
      utilizador0.clone();
      assertEquals(1, utilizador0.getN_comprados());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador.setCodigo((-18L));
      utilizador0.clone();
      assertEquals((-18L), utilizador0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.adicionaArtigo((String) null);
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(2L, utilizador0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Long long0 = new Long((-3480L));
      Utilizador utilizador0 = new Utilizador("45+(^i#", "45+(^i#", "45+(^i#", long0, (String) null);
      utilizador0.adicionaArtigo("A encomenda ");
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.setProdutosVendidos((Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.setProdutosVender((Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.setPendentes((Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.setFaturasVendas((Map<Long, Fatura>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.setFaturasCompras((Map<Long, Fatura>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.setDevolvidos((Set<Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.setComprei((Set<Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.setCarrinho((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Long long0 = new Long(4024L);
      Utilizador utilizador0 = new Utilizador("", "", " Id das artigos pendentes: ", long0, " Id das artigos pendentes: ");
      // Undeclared exception!
      try { 
        utilizador0.numeroArtigos((Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.compareTo((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.adicionaArtigo("");
      try { 
        utilizador0.adicionaArtigo("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo  j\u00E1 existe na encomenda
         //
         verifyException("Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Utilizador utilizador0 = null;
      try {
        utilizador0 = new Utilizador(" Id das artigos pendentes: ", "myl,G!lmH\"K,", "AyfJkxTlcLwh", (Long) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Utilizador utilizador0 = null;
      try {
        utilizador0 = new Utilizador((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      utilizador0.adicionaFaturaComprador(false, (-1L), 430L, linkedHashSet0, (-992.523018406371), (-1L), (-992.523018406371));
      utilizador0.getFaturasCompras();
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getNome());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Long long0 = new Long((-3480L));
      Utilizador utilizador0 = new Utilizador("45+(^i#", "45+(^i#", "45+(^i#", long0, (String) null);
      String string0 = utilizador0.getPassword();
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertNull(string0);
      assertEquals(0, utilizador0.getN_comprados());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      long long0 = Utilizador.criaCodigo();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Long long0 = new Long(2L);
      Utilizador utilizador0 = new Utilizador("[", "a,[penU=$jGSYxyy", "[", long0, "Taxa Vintage: ");
      String string0 = utilizador0.getEmail();
      assertEquals("a,[penU=$jGSYxyy", utilizador0.getNome());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("[", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("[", string0);
      assertEquals("Taxa Vintage: ", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Long long0 = new Long((-655L));
      Utilizador utilizador0 = new Utilizador((String) null, "", (String) null, long0, "");
      String string0 = utilizador0.getMorada();
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(2L, utilizador0.getCodigo());
      assertNull(string0);
      assertEquals(0, utilizador0.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.getComprei();
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getPassword());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Long long0 = new Long((-3480L));
      Utilizador utilizador0 = new Utilizador("45+(^i#", "45+(^i#", "45+(^i#", long0, (String) null);
      utilizador0.getPendentes();
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Long long0 = new Long((-1086L));
      Utilizador utilizador0 = new Utilizador((String) null, (String) null, (String) null, long0, "ryx sV/w3+lbp=VXOu");
      long long1 = utilizador0.getId();
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, long1);
      assertEquals(0, utilizador0.getN_comprados());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Long long0 = new Long((-2802L));
      Utilizador utilizador0 = new Utilizador("Taxa Vintage: ", (String) null, "C\u00F3digo: ", long0, "Taxa Vintage: ");
      int int0 = utilizador0.getN_comprados();
      assertEquals(0, int0);
      assertEquals("C\u00F3digo: ", utilizador0.getMorada());
      assertEquals("Taxa Vintage: ", utilizador0.getEmail());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("Taxa Vintage: ", utilizador0.getPassword());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.getProdutosVender();
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getNome());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      int int0 = utilizador0.getN_vendidos();
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(0, int0);
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(2L, utilizador0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      long long0 = utilizador0.getNif();
      assertEquals((-1L), long0);
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(2L, utilizador0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      String string0 = utilizador0.getNome();
      assertEquals("n/d", string0);
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.imprimeFaturasVendas();
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Long long0 = new Long(0L);
      Utilizador utilizador0 = new Utilizador("\u20AC\n", " Artigos: ", "Taxa Vintage: ", long0, "\u20AC\n");
      utilizador0.imprimeFaturasCompras();
      assertEquals("\u20AC\n", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(" Artigos: ", utilizador0.getNome());
      assertEquals("Taxa Vintage: ", utilizador0.getMorada());
      assertEquals("\u20AC\n", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(2L, utilizador0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.adicionaFaturaVendedor(true, (-2990L), (-2990L), "d6D-*i(5iAc:G@,Sj", (-2990L), true, (-2990L), 0.0);
      utilizador0.adicionaFaturaVendedor(false, (-2990L), (-2990L), "FB_RpM}}5(t{AF<=K", (-2990L), true, (-2909.0), 1.0);
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_comprados());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.adicionaFaturaVendedor(false, 26L, 2172L, "hJ1OWLTY*4$", 26L, false, 26L, (-1.0));
      utilizador0.imprimeFaturasVendas();
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getPassword());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador();
      utilizador1.setN_comprados((-1));
      int int0 = utilizador1.compareTo(utilizador0);
      assertEquals((-1), utilizador1.getN_comprados());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      try { 
        utilizador0.compreiToDevolvido(46L);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // A encomenda 46 n\u00E3o foi comprada
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Long long0 = new Long((-2802L));
      Utilizador utilizador0 = new Utilizador("Taxa Vintage: ", (String) null, "C\u00F3digo: ", long0, "Taxa Vintage: ");
      boolean boolean0 = utilizador0.verificaComprei((-2802L));
      assertEquals("Taxa Vintage: ", utilizador0.getPassword());
      assertEquals("C\u00F3digo: ", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("Taxa Vintage: ", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(2L, utilizador0.getCodigo());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.adicionaArtigo("");
      LocalDate localDate0 = MockLocalDate.now();
      utilizador0.finalizaEncomenda(localDate0);
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getEmail());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      LocalDate localDate0 = MockLocalDate.now();
      try { 
        utilizador0.finalizaEncomenda(localDate0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O carrinho est\u00E1 vazio!
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      try { 
        utilizador0.pendenteToAvenda("Compra\n");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo Compra
         //  n\u00E3o existe no carrinho
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      try { 
        utilizador0.pendenteToVendido(" Carrinho: ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo  Carrinho:  n\u00E3o existe no carrinho
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      try { 
        utilizador0.vendidoToaVenda("o");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo o n\u00E3o foi vendido
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      try { 
        utilizador0.aVendaToPendente(">z,");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo >z, n\u00E3o se encontra \u00E0 venda
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.insereNovoArtigo("");
      utilizador0.eliminaArtigo("");
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getMorada());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      try { 
        utilizador0.eliminaArtigo("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo  n\u00E3o se encontra \u00E0 venda
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador(utilizador0);
      utilizador0.novoCarrinho();
      utilizador1.equals(utilizador0);
      assertEquals((-1L), utilizador1.getNif());
      assertEquals("n/d", utilizador1.getPassword());
      assertEquals(0, utilizador1.getN_vendidos());
      assertEquals("n/d", utilizador1.getNome());
      assertEquals(1L, utilizador0.getId());
      assertEquals("n/d", utilizador1.getEmail());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals("n/d", utilizador1.getMorada());
      assertEquals(1L, utilizador1.getId());
      assertEquals(2L, utilizador1.getCodigo());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador(utilizador0);
      // Undeclared exception!
      try { 
        utilizador1.equals(utilizador0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador(utilizador0);
      utilizador0.insereNovoArtigo("0Oy]");
      utilizador1.equals(utilizador0);
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals("n/d", utilizador1.getEmail());
      assertEquals(1L, utilizador1.getId());
      assertEquals("n/d", utilizador1.getNome());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador1.getMorada());
      assertEquals((-1L), utilizador1.getNif());
      assertEquals(2L, utilizador1.getCodigo());
      assertEquals(0, utilizador1.getN_vendidos());
      assertEquals("n/d", utilizador1.getPassword());
      assertEquals(1L, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador(utilizador0);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      utilizador1.setProdutosVendidos(set0);
      utilizador1.equals(utilizador0);
      assertEquals(1L, utilizador0.getId());
      assertEquals(1L, utilizador1.getId());
      assertEquals(0, utilizador1.getN_vendidos());
      assertEquals((-1L), utilizador1.getNif());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(2L, utilizador1.getCodigo());
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals("n/d", utilizador1.getEmail());
      assertEquals("n/d", utilizador1.getMorada());
      assertEquals("n/d", utilizador1.getNome());
      assertEquals("n/d", utilizador1.getPassword());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador(utilizador0);
      assertEquals("n/d", utilizador1.getPassword());
      
      utilizador1.setPassword("RY~l7KU\"(A^YoR6T");
      utilizador1.equals(utilizador0);
      assertEquals((-1L), utilizador1.getNif());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador();
      utilizador0.equals(utilizador1);
      assertEquals(3L, utilizador0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Long long0 = new Long((-2802L));
      Utilizador utilizador0 = new Utilizador("Taxa Vintage: ", (String) null, "C\u00F3digo: ", long0, "Taxa Vintage: ");
      boolean boolean0 = utilizador0.equals(long0);
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("Taxa Vintage: ", utilizador0.getPassword());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("Taxa Vintage: ", utilizador0.getEmail());
      assertEquals("C\u00F3digo: ", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      boolean boolean0 = utilizador0.equals((Object) null);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_vendidos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      boolean boolean0 = utilizador0.equals(utilizador0);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getEmail());
      assertTrue(boolean0);
      assertEquals(0, utilizador0.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Long long0 = new Long(0L);
      Utilizador utilizador0 = new Utilizador("\u20AC\n", " Artigos: ", "Taxa Vintage: ", long0, "\u20AC\n");
      HashMap<Long, Fatura> hashMap0 = new HashMap<Long, Fatura>();
      Set<String> set0 = utilizador0.getProdutosVendidos();
      Fatura fatura0 = new Fatura(false, 1L, 0L, set0, 0.0, 0.0, 0.0);
      hashMap0.put(long0, fatura0);
      utilizador0.setFaturasCompras(hashMap0);
      utilizador0.imprimeFaturasCompras();
      assertEquals("Taxa Vintage: ", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(" Artigos: ", utilizador0.getNome());
      assertEquals("\u20AC\n", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("\u20AC\n", utilizador0.getPassword());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.adicionaFaturaVendedor(true, (-3282L), (-1L), "", (-1719.0155), true, (-1719.0155), (-3282L));
      Map<Long, Fatura> map0 = utilizador0.getFaturasVendas();
      utilizador0.setFaturasVendas(map0);
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getPassword());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Map<Long, Fatura> map0 = utilizador0.getFaturasCompras();
      utilizador0.setFaturasVendas(map0);
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals((-1L), utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      utilizador0.adicionaFaturaComprador(false, 0L, (-892L), linkedHashSet0, 0L, 0L, (-1306.38825133669));
      Utilizador utilizador1 = utilizador0.clone();
      assertNotSame(utilizador1, utilizador0);
      assertEquals("n/d", utilizador1.getNome());
      assertEquals("n/d", utilizador1.getPassword());
      assertEquals(1L, utilizador1.getId());
      assertEquals(2L, utilizador1.getCodigo());
      assertEquals((-1L), utilizador1.getNif());
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals("n/d", utilizador1.getMorada());
      assertEquals(1L, utilizador0.getId());
      assertEquals(0, utilizador1.getN_vendidos());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador1.getEmail());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador(utilizador0);
      utilizador0.adicionaFaturaVendedor(true, 1L, 1L, (String) null, 1L, true, (-1.0), (-1022.0));
      boolean boolean0 = utilizador1.equals(utilizador0);
      assertEquals(2L, utilizador1.getCodigo());
      assertEquals(1L, utilizador0.getId());
      assertEquals(0, utilizador1.getN_vendidos());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(1L, utilizador1.getId());
      assertEquals((-1L), utilizador1.getNif());
      assertFalse(boolean0);
      assertEquals("n/d", utilizador1.getPassword());
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals("n/d", utilizador1.getNome());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      assertEquals("n/d", utilizador0.getNome());
      
      utilizador0.setNome("");
      utilizador0.getNome();
      assertEquals(2L, utilizador0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.getIdCarrinho();
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Long long0 = new Long((-2802L));
      Utilizador utilizador0 = new Utilizador("Taxa Vintage: ", (String) null, "C\u00F3digo: ", long0, "Taxa Vintage: ");
      utilizador0.get1FaturaCompra(2L);
      assertEquals("C\u00F3digo: ", utilizador0.getMorada());
      assertEquals("Taxa Vintage: ", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("Taxa Vintage: ", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_comprados());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      long long0 = Utilizador.getCodigo();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.imprime1FaturaVenda((-368L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Long long0 = new Long(585L);
      Utilizador utilizador0 = new Utilizador(" Data de entrega: ", " Data de entrega: ", " Data de entrega: ", long0, "Utilizador:: {C\u00F3digo: 1 Email: n/d Nome: n/d Morada: n/d Pass: n/d Nif: -1 Artigos comprados: 0 Artigos vendidos: 0 Id dos artigos vendidos: java.util.HashSet@0000000016 Id dos artigos a vender: java.util.HashSet@0000000017 Id das artigos pendentes: java.util.HashSet@0000000018 Id dos artigos comprados: java.util.HashSet@0000000019 Id dos artigos devolvidos: java.util.HashSet@0000000020 Faturas dos artigos comprados: java.util.HashMap@0000000021 Faturas dos artigos vendidos: java.util.HashMap@0000000022 Carrinho: Encomenda:: { Artigos: java.util.HashSet@0000000023 C\u00F3digo: 1 Dimens\u00E3o: Pequeno Estado: Pendente Data de cria\u00E7\u00E3o: 2014-02-14 Data de entrega: N/A} }");
      Set<Long> set0 = utilizador0.getDevolvidos();
      utilizador0.setDevolvidos(set0);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(0, utilizador0.getN_comprados());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      assertEquals("n/d", utilizador0.getMorada());
      
      utilizador0.setMorada("");
      assertEquals(2L, utilizador0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-495L));
      utilizador0.atualizaEncomenda(localDate0);
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.toString();
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(0, utilizador0.getN_comprados());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.adicionaArtigo("");
      Set<String> set0 = utilizador0.artigosCarrinho();
      utilizador0.setProdutosVender(set0);
      try { 
        utilizador0.insereNovoArtigo("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo  j\u00E1 se encontra \u00E0 venda
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Utilizador.setCodigo((-1064L));
      Utilizador utilizador0 = new Utilizador();
      long long0 = utilizador0.getId();
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals((-1064L), long0);
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-1063L), utilizador0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Long long0 = new Long(585L);
      Utilizador utilizador0 = new Utilizador(" Data de entrega: ", " Data de entrega: ", " Data de entrega: ", long0, "Utilizador:: {C\u00F3digo: 1 Email: n/d Nome: n/d Morada: n/d Pass: n/d Nif: -1 Artigos comprados: 0 Artigos vendidos: 0 Id dos artigos vendidos: java.util.HashSet@0000000016 Id dos artigos a vender: java.util.HashSet@0000000017 Id das artigos pendentes: java.util.HashSet@0000000018 Id dos artigos comprados: java.util.HashSet@0000000019 Id dos artigos devolvidos: java.util.HashSet@0000000020 Faturas dos artigos comprados: java.util.HashMap@0000000021 Faturas dos artigos vendidos: java.util.HashMap@0000000022 Carrinho: Encomenda:: { Artigos: java.util.HashSet@0000000023 C\u00F3digo: 1 Dimens\u00E3o: Pequeno Estado: Pendente Data de cria\u00E7\u00E3o: 2014-02-14 Data de entrega: N/A} }");
      Set<String> set0 = utilizador0.artigosCarrinho();
      utilizador0.numeroArtigos(set0);
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.removeCarrinho();
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Long long0 = new Long((-2802L));
      Utilizador utilizador0 = new Utilizador("Taxa Vintage: ", (String) null, "C\u00F3digo: ", long0, "Taxa Vintage: ");
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      utilizador0.setPendentes(set0);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("C\u00F3digo: ", utilizador0.getMorada());
      assertEquals("Taxa Vintage: ", utilizador0.getEmail());
      assertEquals("Taxa Vintage: ", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setN_vendidos((-1));
      int int0 = utilizador0.getN_vendidos();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Long long0 = new Long((-2802L));
      Utilizador utilizador0 = new Utilizador("Taxa Vintage: ", (String) null, "C\u00F3digo: ", long0, "Taxa Vintage: ");
      utilizador0.get1FaturaVenda((-1L));
      assertEquals("Taxa Vintage: ", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("Taxa Vintage: ", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("C\u00F3digo: ", utilizador0.getMorada());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Long long0 = new Long((-2802L));
      Utilizador utilizador0 = new Utilizador("Taxa Vintage: ", (String) null, "C\u00F3digo: ", long0, "Taxa Vintage: ");
      utilizador0.setNif((-1083L));
      assertEquals((-1083L), utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      try { 
        utilizador0.removeArtigo("|!");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo |! n\u00E3o existe na encomenda
         //
         verifyException("Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.imprime1FaturaCompra(0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Long long0 = new Long((-2802L));
      Utilizador utilizador0 = new Utilizador("Taxa Vintage: ", (String) null, "C\u00F3digo: ", long0, "Taxa Vintage: ");
      utilizador0.setN_comprados(2188);
      Utilizador utilizador1 = new Utilizador();
      int int0 = utilizador0.compareTo(utilizador1);
      assertEquals(3L, utilizador0.getCodigo());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      LinkedHashSet<Long> linkedHashSet0 = new LinkedHashSet<Long>();
      utilizador0.setComprei(linkedHashSet0);
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("n/d", utilizador0.getEmail());
  }
}
