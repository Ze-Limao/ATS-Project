/*
 * This file was automatically generated by EvoSuite
 * Thu May 02 10:38:47 GMT 2024
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Gestor_Transportadoras_ESTest extends Gestor_Transportadoras_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Long, Transportadora> hashMap0 = new HashMap<Long, Transportadora>();
      Long long0 = new Long(1L);
      Transportadora transportadora0 = new Transportadora("L-Rq?39", 0.0, 0.0, (-689.176221), 1.0, 1.0, true, 2335);
      hashMap0.put(long0, transportadora0);
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras(hashMap0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      linkedList0.add(long0);
      double double0 = gestor_Transportadoras0.precoTransporte(linkedList0);
      assertFalse(linkedList0.contains(1L));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      gestor_Transportadoras0.criaTransportadora((String) null, (-3330.9646414151994), (-3330.9646414151994), (-3330.9646414151994), (-3330.9646414151994), (-3330.9646414151994), true, 0);
      gestor_Transportadoras0.alteraFormula(1L, (-2595));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      HashMap<Long, Transportadora> hashMap0 = new HashMap<Long, Transportadora>();
      Long long0 = Long.getLong("", 0L);
      Transportadora transportadora0 = new Transportadora("", 1.0, 1712.67419, 1.0, 1.0, 1712.67419, true, 1181);
      hashMap0.put(long0, transportadora0);
      gestor_Transportadoras0.setTransportadoras(hashMap0);
      long long1 = gestor_Transportadoras0.removeTransportadora(0L);
      assertEquals(0L, long1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Long, Transportadora> hashMap0 = new HashMap<Long, Transportadora>();
      Long long0 = new Long((-1L));
      Transportadora transportadora0 = new Transportadora("m0v${", 0.0, 153.409172620674, 0.0, 0.0, 1393.5709775, false, 5);
      hashMap0.put(long0, transportadora0);
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras(hashMap0);
      long long1 = gestor_Transportadoras0.removeTransportadora((-1L));
      assertEquals((-1L), long1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      // Undeclared exception!
      try { 
        gestor_Transportadoras0.setTransportadoras((Map<Long, Transportadora>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      // Undeclared exception!
      try { 
        gestor_Transportadoras0.fatorouMais();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = null;
      try {
        gestor_Transportadoras0 = new Gestor_Transportadoras((Map<Long, Transportadora>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = null;
      try {
        gestor_Transportadoras0 = new Gestor_Transportadoras((Gestor_Transportadoras) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      gestor_Transportadoras0.criaTransportadora("", 1731.68, 1731.68, 1731.68, 1731.68, 429.1966370317, false, (-445));
      Map<Long, Transportadora> map0 = gestor_Transportadoras0.getTransportadoras();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      Gestor_Transportadoras gestor_Transportadoras1 = new Gestor_Transportadoras(gestor_Transportadoras0);
      assertTrue(gestor_Transportadoras1.equals((Object)gestor_Transportadoras0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      gestor_Transportadoras0.criaTransportadora("Gestor de Transportadoras:: { Informa\u00E7\u00F5es das transportadoras: java.util.HashMap@0000000003}\n", 86.6363, 86.6363, 0.0, 0.0, (-2808.630085), true, (-3408));
      String string0 = gestor_Transportadoras0.transportadorasPremium();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      gestor_Transportadoras0.criaTransportadora("", 1731.68, 1731.68, 1731.68, 1731.68, 429.1966370317, false, (-445));
      String string0 = gestor_Transportadoras0.transportadorasPremium();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Long, Transportadora> hashMap0 = new HashMap<Long, Transportadora>();
      Long long0 = new Long(1L);
      Transportadora transportadora0 = new Transportadora();
      transportadora0.setPremium(true);
      hashMap0.put(long0, transportadora0);
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras(hashMap0);
      String string0 = gestor_Transportadoras0.transportadorasNormais();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<Long, Transportadora> hashMap0 = new HashMap<Long, Transportadora>();
      Long long0 = new Long(1L);
      Transportadora transportadora0 = new Transportadora();
      hashMap0.put(long0, transportadora0);
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras(hashMap0);
      String string0 = gestor_Transportadoras0.transportadorasNormais();
      assertEquals("Transportadora:: { Id: 1 Nome: Transportadora Invalida Valor da encomenda pequena: 0.0 Valor da encomenda m\u00E9dia: 0.0 Valor da encomenda grande: 0.0 Imposto: 0.0 Margem de lucro: 0.0 \u00C9 premium: false Formula atual: 0 Total lucro: 0.0}\n", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Long, Transportadora> hashMap0 = new HashMap<Long, Transportadora>();
      Long long0 = new Long(1L);
      Transportadora transportadora0 = new Transportadora();
      transportadora0.setPremium(true);
      hashMap0.put(long0, transportadora0);
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras(hashMap0);
      boolean boolean0 = gestor_Transportadoras0.existe_transpotadoraPremium(1L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Long, Transportadora> hashMap0 = new HashMap<Long, Transportadora>();
      Long long0 = new Long(1L);
      Transportadora transportadora0 = new Transportadora();
      BiFunction<Object, Object, Transportadora> biFunction0 = (BiFunction<Object, Object, Transportadora>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(transportadora0).when(biFunction0).apply(any() , any());
      hashMap0.compute(long0, biFunction0);
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras(hashMap0);
      boolean boolean0 = gestor_Transportadoras0.existe_transpotadoraPremium(1L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      boolean boolean0 = gestor_Transportadoras0.existe_transpotadoraPremium(0L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      gestor_Transportadoras0.criaTransportadora("Gestor de Transportadoras:: { Informa\u00E7\u00F5es das transportadoras: java.util.HashMap@0000000002}\n", 86.6363, 86.6363, 0.0, 0.0, (-2808.630085), true, (-3408));
      boolean boolean0 = gestor_Transportadoras0.existe_transpotadoraNormal(1L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      gestor_Transportadoras0.criaTransportadora("", 1731.68, 1731.68, 1731.68, 1731.68, 429.1966370317, false, (-445));
      boolean boolean0 = gestor_Transportadoras0.existe_transpotadoraNormal(1L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<Long, Transportadora> hashMap0 = new HashMap<Long, Transportadora>();
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras(hashMap0);
      boolean boolean0 = gestor_Transportadoras0.existe_transpotadoraNormal(0L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<Long, Transportadora> hashMap0 = new HashMap<Long, Transportadora>();
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras(hashMap0);
      boolean boolean0 = gestor_Transportadoras0.existe_transpotadora(2335);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<Long, Transportadora> hashMap0 = new HashMap<Long, Transportadora>();
      Long long0 = new Long(1L);
      Transportadora transportadora0 = new Transportadora();
      BiFunction<Object, Object, Transportadora> biFunction0 = (BiFunction<Object, Object, Transportadora>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(transportadora0).when(biFunction0).apply(any() , any());
      Transportadora transportadora1 = hashMap0.compute(long0, biFunction0);
      transportadora1.setFormula(3);
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras(hashMap0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      linkedList0.add(long0);
      double double0 = gestor_Transportadoras0.precoTransporte(linkedList0);
      assertFalse(linkedList0.contains(1L));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<Long, Transportadora> hashMap0 = new HashMap<Long, Transportadora>();
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras(hashMap0);
      gestor_Transportadoras0.criaTransportadora("Gestor de Transportadoras:: { Informa\u00E7\u00F5es das transportadoras: java.util.HashMap@0000000002}\n", 0.7, 0.7, 28.0, 40.5708, (-2.5004231710152616), true, 1);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long0 = new Long(1);
      linkedList0.add(long0);
      double double0 = gestor_Transportadoras0.precoTransporte(linkedList0);
      assertFalse(linkedList0.contains(long0));
      assertEquals((-65.48509268131397), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<Long, Transportadora> hashMap0 = new HashMap<Long, Transportadora>();
      Long long0 = new Long(1L);
      Transportadora transportadora0 = new Transportadora();
      BiFunction<Object, Object, Transportadora> biFunction0 = (BiFunction<Object, Object, Transportadora>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(transportadora0).when(biFunction0).apply(any() , any());
      hashMap0.compute(long0, biFunction0);
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras(hashMap0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      linkedList0.add(long0);
      double double0 = gestor_Transportadoras0.precoTransporte(linkedList0);
      assertFalse(linkedList0.contains(1L));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<Long, Transportadora> hashMap0 = new HashMap<Long, Transportadora>();
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras(hashMap0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long0 = new Long(1);
      linkedList0.add(long0);
      // Undeclared exception!
      try { 
        gestor_Transportadoras0.precoTransporte(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<Long, Transportadora> hashMap0 = new HashMap<Long, Transportadora>();
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras(hashMap0);
      Long long0 = new Long((-1179L));
      Transportadora transportadora0 = new Transportadora("Transportadora:: {", 3060.75687114054, 0.0, (-2523L), (-1179L), (-1179L), false, 0);
      hashMap0.put(long0, transportadora0);
      gestor_Transportadoras0.setTransportadoras(hashMap0);
      String string0 = gestor_Transportadoras0.fatorouMais();
      assertEquals("Transportadora:: { Id: 1 Nome: Transportadora:: { Valor da encomenda pequena: 3060.75687114054 Valor da encomenda m\u00E9dia: 0.0 Valor da encomenda grande: -2523.0 Imposto: -1179.0 Margem de lucro: -1179.0 \u00C9 premium: false Formula atual: 0 Total lucro: 0.0}", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      gestor_Transportadoras0.criaTransportadora("", 1731.68, 1731.68, 1731.68, 1731.68, 429.1966370317, false, (-445));
      gestor_Transportadoras0.criaTransportadora("Gestor de Transportadoras:: { Informa\u00E7\u00F5es das transportadoras: java.util.HashMap@0000000003}\n", 86.6363, 86.6363, 0.0, 0.0, (-2808.630085), true, (-3408));
      gestor_Transportadoras0.criaTransportadora("Transportadora:: { Id: 1 Nome:  Valor da encomenda pequena: 1731.68 Valor da encomenda m\u00E9dia: 1731.68 Valor da encomenda grande: 1731.68 Imposto: 1731.68 Margem de lucro: 429.1966370317 \u00C9 premium: false Formula atual: -445 Total lucro: 0.0}", 0L, 0L, 0L, 0L, 0L, true, 3);
      long long0 = gestor_Transportadoras0.removeTransportadora(3);
      assertEquals(3L, long0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<Long, Transportadora> hashMap0 = new HashMap<Long, Transportadora>();
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras(hashMap0);
      try { 
        gestor_Transportadoras0.removeTransportadora((-2523L));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // A transportadora com ID -2523 n\u00E3o existe
         //
         verifyException("Gestor_Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      boolean boolean0 = gestor_Transportadoras0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      boolean boolean0 = gestor_Transportadoras0.equals(gestor_Transportadoras0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<Long, Transportadora> hashMap0 = new HashMap<Long, Transportadora>();
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras(hashMap0);
      Transportadora transportadora0 = new Transportadora("Transportadora:: {", 3060.75687114054, 0.0, (-2523L), (-1179L), (-1179L), false, 0);
      boolean boolean0 = gestor_Transportadoras0.equals(transportadora0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMap<Long, Transportadora> hashMap0 = new HashMap<Long, Transportadora>();
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras(hashMap0);
      Long long0 = new Long((-1179L));
      Transportadora transportadora0 = new Transportadora("Transportadora:: {", 3060.75687114054, 0.0, (-2523L), (-1179L), (-1179L), false, 0);
      hashMap0.put(long0, transportadora0);
      gestor_Transportadoras0.setTransportadoras(hashMap0);
      Gestor_Transportadoras gestor_Transportadoras1 = gestor_Transportadoras0.clone();
      assertNotSame(gestor_Transportadoras1, gestor_Transportadoras0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<Long, Transportadora> hashMap0 = new HashMap<Long, Transportadora>();
      Long long0 = new Long(1L);
      Transportadora transportadora0 = new Transportadora();
      hashMap0.put(long0, transportadora0);
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras(hashMap0);
      boolean boolean0 = gestor_Transportadoras0.existe_transpotadora(1L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      Map<Long, Transportadora> map0 = gestor_Transportadoras0.getTransportadoras();
      Gestor_Transportadoras gestor_Transportadoras1 = new Gestor_Transportadoras(map0);
      boolean boolean0 = gestor_Transportadoras0.equals(gestor_Transportadoras1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      String string0 = gestor_Transportadoras0.formulasNormais();
      assertEquals("1) (ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9\n2) (ValorBase * (1 + MargemLucroTransportadora + Imposto)) * 0,7", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      // Undeclared exception!
      try { 
        gestor_Transportadoras0.alteraFormula(1691L, (-1024));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      String string0 = gestor_Transportadoras0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      String string0 = gestor_Transportadoras0.formulasDisponiveis();
      assertEquals("1) (ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9\n2) (ValorBase * (1 + MargemLucroTransportadora + Imposto)) * 0,7\n3) (ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      gestor_Transportadoras0.criaTransportadora("1) (ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9\n2) (ValorBase * (1 + MargemLucroTransportadora + Imposto)) * 0,7", (-9.13054091477622), 0.9, 0.0, (-1945.91699993), 891.5013268249, true, (-1));
  }
}
