/*
 * This file was automatically generated by EvoSuite
 * Thu May 02 10:40:40 GMT 2024
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Transportadora_ESTest extends Transportadora_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      transportadora0.setNome("");
      Transportadora transportadora1 = new Transportadora(transportadora0);
      transportadora1.setNome("");
      Transportadora.criaCodigo();
      transportadora1.preco_transportadora3(2);
      transportadora1.setPremium(false);
      transportadora1.preco_transportadora1(2);
      transportadora0.preco_transportadora1((-1));
      transportadora0.preco_transportadora2((-1782));
      Transportadora transportadora2 = transportadora1.clone();
      transportadora1.setTotalLucro(400.7);
      transportadora2.setValor_pequenas((-1782));
      transportadora2.setMargemlucro(0.0);
      transportadora2.setTotalLucro(0.9);
      transportadora2.setValor_grande(0.9);
      transportadora2.formula3();
      transportadora0.preco_transportadora2(1);
      transportadora0.preco_transportadora2(101);
      transportadora1.equals(transportadora0);
      transportadora1.toString();
      Transportadora transportadora3 = transportadora2.clone();
      transportadora3.setValor_medio(2);
      transportadora3.toString();
      transportadora0.equals(transportadora3);
      transportadora3.toString();
      transportadora0.formula1();
      transportadora2.preco_transportadora2((-3612));
      transportadora3.clone();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      transportadora0.isPremium();
      Transportadora.criaCodigo();
      transportadora0.setValor_medio(0.0);
      transportadora0.setId(0L);
      Transportadora.setCodigo(2L);
      transportadora0.preco_transportadora2(2137);
      transportadora0.getValor_grande();
      transportadora0.getTotalLucro();
      Transportadora.getCodigo();
      transportadora0.setPremium(false);
      transportadora0.getId();
      transportadora0.getId();
      Transportadora transportadora1 = new Transportadora(transportadora0);
      transportadora0.preco_transportadora3(1489);
      transportadora1.setFormula(1489);
      transportadora0.setMargemlucro((-1663.6513538305194));
      transportadora1.setFormula(2137);
      transportadora1.preco_transportadora1(2137);
      transportadora0.equals(transportadora1);
      transportadora0.getTotalLucro();
      transportadora1.preco_transportadora1(1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      transportadora0.isPremium();
      Transportadora.criaCodigo();
      transportadora0.setValor_medio(0.0);
      transportadora0.setId(0L);
      Transportadora.setCodigo(2L);
      transportadora0.preco_transportadora1((-1));
      transportadora0.preco_transportadora2(2137);
      transportadora0.getValor_grande();
      transportadora0.getTotalLucro();
      Transportadora.getCodigo();
      transportadora0.setPremium(false);
      transportadora0.getId();
      transportadora0.getId();
      Transportadora transportadora1 = new Transportadora(transportadora0);
      transportadora1.setMargemlucro((-122.2358));
      transportadora1.setFormula(1489);
      transportadora1.setFormula(2137);
      transportadora1.preco_transportadora1(2137);
      transportadora0.equals(transportadora1);
      transportadora1.getTotalLucro();
      transportadora1.preco_transportadora1(1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      transportadora0.setPremium(false);
      transportadora0.setValor_pequenas(1216.7440919);
      transportadora0.preco_transportadora1((-1731));
      transportadora0.setValor_medio(1.0);
      transportadora0.preco_transportadora2(0);
      Transportadora transportadora1 = transportadora0.clone();
      transportadora1.setValor_pequenas((-2502.1988090462214));
      transportadora1.preco_transportadora1(0);
      transportadora0.preco_transportadora3((-1731));
      transportadora1.formula2();
      Transportadora transportadora2 = transportadora1.clone();
      transportadora0.preco_transportadora3(0);
      transportadora1.preco_transportadora2(5);
      Transportadora transportadora3 = transportadora0.clone();
      transportadora3.preco_transportadora3((-1731));
      transportadora3.preco_transportadora2((-1555));
      transportadora2.formula3();
      transportadora0.preco_transportadora3((-1731));
      Transportadora transportadora4 = new Transportadora(transportadora1);
      transportadora2.equals(transportadora4);
      transportadora0.preco_transportadora3((-1731));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      transportadora0.setId(1361);
      transportadora0.setValor_grande(1361);
      transportadora0.setFormula(1361);
      Transportadora transportadora1 = new Transportadora(transportadora0);
      Transportadora.criaCodigo();
      transportadora0.setValor_pequenas(2L);
      transportadora1.setValor_grande(1361);
      transportadora1.setValor_medio(4437.1496054);
      transportadora1.setValor_medio(2L);
      transportadora1.preco_transportadora2(1889);
      transportadora1.equals(transportadora0);
      transportadora1.preco_transportadora3(1361);
      transportadora0.formula2();
      transportadora1.preco_transportadora2(1361);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Transportadora.criaCodigo();
      Transportadora transportadora0 = new Transportadora("", 1L, (-1.0), 335.74, (-1.0), 1L, false, 0);
      transportadora0.getFormula();
      transportadora0.getId();
      transportadora0.formula1();
      transportadora0.getMargemlucro();
      transportadora0.setFormula(0);
      Transportadora transportadora1 = new Transportadora(transportadora0);
      transportadora1.setValor_medio(0);
      transportadora0.equals(transportadora1);
      transportadora1.setValor_medio(0);
      transportadora0.setValor_grande(1.0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora(" Nome: ", (-1217.89349996), (-1217.89349996), 0.7, 0.7, 0.7, true, 1);
      transportadora0.setMargemlucro((-1.0));
      transportadora0.setTotalLucro((-1.0));
      transportadora0.setFormula(1402);
      Transportadora transportadora1 = new Transportadora(transportadora0);
      transportadora0.setValor_pequenas((-381.0));
      transportadora0.toString();
      transportadora0.preco_transportadora3(1);
      transportadora1.formula2();
      transportadora1.formula1();
      Transportadora transportadora2 = transportadora1.clone();
      Transportadora.setCodigo(1);
      transportadora2.setPremium(true);
      transportadora2.toString();
      transportadora0.toString();
      transportadora2.toString();
      Object object0 = new Object();
      transportadora1.equals(object0);
      transportadora0.formula3();
      transportadora0.equals("Transportadora:: { Id: 1 Nome:  Nome:  Valor da encomenda pequena: -381.0 Valor da encomenda m\u00E9dia: -1217.89349996 Valor da encomenda grande: 0.7 Imposto: 0.7 Margem de lucro: -1.0 \u00C9 premium: true Formula atual: 1402 Total lucro: -1.0}");
      transportadora0.formula2();
      Transportadora transportadora3 = transportadora0.clone();
      transportadora3.setPremium(false);
      transportadora0.formula3();
      transportadora3.formula2();
      transportadora3.equals(transportadora0);
      transportadora3.clone();
      transportadora2.clone();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      transportadora0.isPremium();
      Transportadora.criaCodigo();
      transportadora0.setValor_medio(0.0);
      transportadora0.setId(0L);
      Transportadora.setCodigo(2L);
      transportadora0.preco_transportadora2((-2998));
      transportadora0.getValor_grande();
      transportadora0.getTotalLucro();
      Transportadora.getCodigo();
      transportadora0.setPremium(false);
      transportadora0.getId();
      transportadora0.getId();
      Transportadora transportadora1 = new Transportadora(transportadora0);
      transportadora1.setFormula(1489);
      transportadora1.setFormula((-2998));
      transportadora1.preco_transportadora1((-2998));
      transportadora0.equals(transportadora1);
      transportadora1.getTotalLucro();
      transportadora1.preco_transportadora1(1);
      transportadora1.formula1();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      transportadora0.setPremium(false);
      transportadora0.setMargemlucro(774.0972238096086);
      Transportadora transportadora1 = new Transportadora(transportadora0);
      transportadora1.preco_transportadora3(0);
      transportadora1.setNome("fD&2`,`]K)m.e?VB+A");
      transportadora1.getValor_grande();
      transportadora1.getTotalLucro();
      transportadora0.preco_transportadora2(0);
      transportadora0.setPremium(false);
      transportadora1.toString();
      transportadora1.setMargemlucro(0.0);
      transportadora1.toString();
      transportadora0.formula2();
      Transportadora.setCodigo(0);
      Transportadora transportadora2 = transportadora1.clone();
      transportadora2.setImpostos(0);
      Transportadora transportadora3 = transportadora0.clone();
      transportadora3.setValor_grande(799.362);
      transportadora0.setMargemlucro(0.0);
      transportadora1.isPremium();
      transportadora0.setFormula((-2638));
      transportadora0.setPremium(false);
      transportadora0.getValor_medio();
      Transportadora.getCodigo();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      transportadora0.isPremium();
      transportadora0.setNome("}");
      Transportadora.criaCodigo();
      transportadora0.setValor_medio(0.0);
      transportadora0.setId(0L);
      Transportadora.setCodigo(2L);
      transportadora0.preco_transportadora2(2137);
      transportadora0.getValor_grande();
      transportadora0.getTotalLucro();
      Transportadora.getCodigo();
      transportadora0.setPremium(false);
      transportadora0.getId();
      transportadora0.getId();
      Transportadora transportadora1 = new Transportadora(transportadora0);
      transportadora1.toString();
      transportadora1.setFormula(1489);
      transportadora1.setValor_grande(3885.5211258);
      transportadora1.setFormula(2137);
      transportadora1.preco_transportadora1(2137);
      transportadora0.equals(transportadora1);
      transportadora1.getTotalLucro();
      transportadora1.clone();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Transportadora.criaCodigo();
      Transportadora transportadora0 = new Transportadora("", 1L, (-1.0), 335.74, (-1.0), 1L, false, 0);
      transportadora0.getFormula();
      transportadora0.getId();
      transportadora0.formula1();
      transportadora0.getMargemlucro();
      transportadora0.setFormula(0);
      Transportadora transportadora1 = new Transportadora(transportadora0);
      transportadora1.setValor_pequenas(0);
      transportadora1.setNome("");
      transportadora0.equals(transportadora1);
      transportadora1.setValor_medio(0);
      transportadora0.setValor_grande(1.0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      transportadora0.getFormula();
      Transportadora.getCodigo();
      transportadora0.setTotalLucro(2L);
      Transportadora.criaCodigo();
      transportadora0.setId(2L);
      transportadora0.equals(transportadora0);
      transportadora0.formula3();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", 5012.3640073, 5012.3640073, 458.928303818, 458.928303818, 1.0, true, 3036);
      transportadora0.setPremium(true);
      transportadora0.preco_transportadora1((-1));
      transportadora0.preco_transportadora3((-1));
      transportadora0.preco_transportadora1((-1));
      transportadora0.setPremium(false);
      transportadora0.formula2();
      transportadora0.preco_transportadora2((-1));
      Transportadora transportadora1 = transportadora0.clone();
      transportadora1.setFormula(374);
      transportadora1.setImpostos((-1.0));
      transportadora1.setValor_pequenas(0.0);
      transportadora1.setMargemlucro(458.928303818);
      Transportadora transportadora2 = transportadora1.clone();
      transportadora2.setFormula(369);
      Transportadora.setCodigo(3036);
      Transportadora.getCodigo();
      transportadora2.equals(transportadora0);
      Object object0 = new Object();
      transportadora1.equals(object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      transportadora0.setNome("+?%J~XbR(}");
      Transportadora transportadora1 = new Transportadora(transportadora0);
      transportadora1.setValor_pequenas(1235.80647);
      transportadora1.formula1();
      transportadora1.setValor_grande(1023.799265766);
      transportadora0.preco_transportadora3(3006);
      transportadora1.setValor_pequenas((-1217.89349996));
      transportadora0.setTotalLucro((-1217.89349996));
      transportadora1.preco_transportadora2(482);
      transportadora1.preco_transportadora1(482);
      transportadora0.setValor_grande(482);
      transportadora0.setValor_grande((-1217.89349996));
      transportadora0.toString();
      transportadora1.preco_transportadora3(5);
      transportadora1.preco_transportadora2(1014);
      transportadora1.setValor_medio((-1217.89349996));
      transportadora0.preco_transportadora3((-2118));
      transportadora1.equals(transportadora0);
      Transportadora.getCodigo();
      transportadora1.preco_transportadora2(2573);
      transportadora0.preco_transportadora2((-2237));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora(" Nome: ", 1.0, 0.9, 1.0, 0.9, 0.9, true, 2);
      transportadora0.preco_transportadora2(2);
      transportadora0.setValor_grande(2);
      Transportadora.criaCodigo();
      Transportadora transportadora1 = new Transportadora(transportadora0);
      transportadora1.setValor_medio((-1.0));
      transportadora1.setId(2);
      transportadora1.setId(2);
      transportadora1.setId(2L);
      Transportadora.criaCodigo();
      transportadora1.formula1();
      transportadora1.setValor_pequenas(1.0);
      transportadora0.setId(2);
      transportadora0.setId(2);
      transportadora0.setMargemlucro((-1.0));
      transportadora0.setValor_grande((-756.06447541161));
      transportadora0.getNome();
      Transportadora transportadora2 = new Transportadora();
      transportadora0.equals(transportadora2);
      transportadora1.equals(" Nome: ");
      Transportadora.setCodigo(3L);
      transportadora2.setTotalLucro((-1.0));
      transportadora1.getFormula();
      transportadora1.setPremium(true);
      transportadora1.getValor_medio();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", (-1984.337), (-1984.337), (-1984.337), (-1984.337), 1.0, false, (-2685));
      transportadora0.setNome("");
      transportadora0.setTotalLucro(1.0);
      transportadora0.setValor_pequenas(1.0);
      transportadora0.setTotalLucro(2842.2);
      transportadora0.setPremium(false);
      transportadora0.setMargemlucro((-1984.337));
      transportadora0.setValor_medio(1.0);
      transportadora0.toString();
      transportadora0.setFormula(2454);
      transportadora0.preco_transportadora1(2454);
      Object object0 = new Object();
      transportadora0.equals(object0);
      transportadora0.setPremium(false);
      transportadora0.formula3();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      transportadora0.isPremium();
      transportadora0.setNome("}");
      Transportadora.criaCodigo();
      transportadora0.setValor_medio(0.0);
      transportadora0.setId(0L);
      Transportadora.setCodigo(2L);
      transportadora0.preco_transportadora2(2137);
      transportadora0.getValor_grande();
      transportadora0.getTotalLucro();
      Transportadora.getCodigo();
      transportadora0.setPremium(false);
      transportadora0.getId();
      transportadora0.getId();
      Transportadora transportadora1 = new Transportadora(transportadora0);
      transportadora1.setFormula(1489);
      transportadora1.setFormula(2137);
      transportadora1.preco_transportadora1(2137);
      transportadora0.equals(transportadora1);
      transportadora1.getTotalLucro();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora((String) null, 2388.3896950690164, 0.0, 0.0, (-3599.0), 0.0, false, 1337);
      Transportadora transportadora1 = new Transportadora(transportadora0);
      transportadora1.preco_transportadora3(1921);
      transportadora1.setFormula(0);
      transportadora1.setValor_pequenas(2643.376);
      transportadora0.formula2();
      transportadora0.getTotalLucro();
      transportadora0.preco_transportadora1(1337);
      transportadora0.getValor_pequenas();
      transportadora1.setTotalLucro(0.0);
      transportadora0.getNome();
      transportadora1.getValor_medio();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("~C!qW", 1.0, (-1.0), 0.0, (-1327.58386471363), 0.0, false, 2);
      transportadora0.preco_transportadora3(2);
      transportadora0.setValor_grande((-1.0));
      transportadora0.preco_transportadora1(2);
      Transportadora.setCodigo((-1L));
      Transportadora transportadora1 = new Transportadora(transportadora0);
      Transportadora.criaCodigo();
      transportadora1.isPremium();
      transportadora1.preco_transportadora3(804);
      transportadora1.setId(2);
      transportadora1.setFormula(2);
      Transportadora.criaCodigo();
      transportadora1.setPremium(false);
      transportadora0.setImpostos((-1.0));
      transportadora1.setFormula(2);
      transportadora1.getTotalLucro();
      transportadora0.getMargemlucro();
      transportadora1.getTotalLucro();
      transportadora0.setPremium(false);
      transportadora0.getImpostos();
      transportadora0.isPremium();
      transportadora0.toString();
      transportadora0.getFormula();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora(",jbh;m\"!x", 0.7, (-1098.18607441), (-1098.18607441), 0.7, 0.0, false, 1672);
      transportadora0.preco_transportadora1(1672);
      Transportadora transportadora1 = new Transportadora(transportadora0);
      transportadora0.setImpostos((-1.0));
      transportadora1.toString();
      transportadora1.setFormula(3038);
      transportadora1.setMargemlucro(3052.19);
      transportadora1.setPremium(false);
      transportadora0.equals(transportadora1);
      transportadora1.setTotalLucro((-1098.18607441));
      Transportadora.setCodigo(3038);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora(" \u00C9 premium: ", 1932.87, (-410.6149241065129), 1932.87, 1932.87, 1932.87, false, 338);
      transportadora0.preco_transportadora1(338);
      transportadora0.getNome();
      transportadora0.toString();
      transportadora0.setImpostos((-1811.448));
      transportadora0.setImpostos(0.0);
      transportadora0.setValor_grande((-410.6149241065129));
      transportadora0.preco_transportadora1((-1));
      Transportadora.criaCodigo();
      transportadora0.getNome();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      transportadora0.setMargemlucro(0.0);
      transportadora0.setTotalLucro(0.0);
      transportadora0.setFormula((-2489));
      transportadora0.preco_transportadora3((-2489));
      transportadora0.preco_transportadora3(4283);
      transportadora0.preco_transportadora2(4283);
      transportadora0.setNome("");
      Transportadora.criaCodigo();
      transportadora0.getFormula();
      transportadora0.getTotalLucro();
      transportadora0.getId();
      Transportadora transportadora1 = transportadora0.clone();
      transportadora1.setNome("dkGAB\"vF`#y6*");
      transportadora0.setFormula((-1847));
      transportadora1.preco_transportadora1(0);
      transportadora0.getFormula();
      transportadora1.setValor_grande(571.0);
      transportadora1.getMargemlucro();
      transportadora1.getValor_grande();
      transportadora1.setValor_grande(0.0);
      transportadora1.equals(transportadora0);
      transportadora1.formula1();
      transportadora0.getFormula();
      Transportadora transportadora2 = new Transportadora();
      transportadora0.equals(transportadora2);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      Transportadora transportadora1 = new Transportadora(transportadora0);
      transportadora1.setValor_grande(4661.24);
      transportadora1.setFormula(0);
      transportadora1.formula3();
      transportadora1.toString();
      Transportadora.setCodigo(0);
      transportadora0.preco_transportadora1(0);
      transportadora1.setValor_grande(1.0);
      Transportadora.criaCodigo();
      transportadora0.getValor_medio();
      transportadora1.preco_transportadora2(0);
      transportadora1.getId();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      transportadora0.toString();
      transportadora0.toString();
      transportadora0.setTotalLucro(2449.658423984882);
      transportadora0.setValor_grande((-698.62520707));
      transportadora0.setTotalLucro((-698.62520707));
      transportadora0.clone();
      transportadora0.preco_transportadora2(0);
      transportadora0.setImpostos(0.0);
      transportadora0.formula3();
      transportadora0.setNome("Transportadora:: { Id: 1 Nome: Transportadora Invalida Valor da encomenda pequena: 0.0 Valor da encomenda m\u00E9dia: 0.0 Valor da encomenda grande: 0.0 Imposto: 0.0 Margem de lucro: 0.0 \u00C9 premium: false Formula atual: 0 Total lucro: 0.0}");
      transportadora0.toString();
      transportadora0.setId((-1789L));
      Transportadora.criaCodigo();
      transportadora0.getTotalLucro();
      transportadora0.setNome("Transportadora:: { Id: 1 Nome: Transportadora Invalida Valor da encomenda pequena: 0.0 Valor da encomenda m\u00E9dia: 0.0 Valor da encomenda grande: 0.0 Imposto: 0.0 Margem de lucro: 0.0 \u00C9 premium: false Formula atual: 0 Total lucro: 0.0}");
      transportadora0.getTotalLucro();
      transportadora0.setNome("@` R:lHank_6>");
      transportadora0.formula2();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      transportadora0.preco_transportadora3((-1181));
      transportadora0.setValor_pequenas((-1181));
      transportadora0.setValor_grande(499.5);
      transportadora0.setValor_medio(499.5);
      transportadora0.preco_transportadora3(974);
      transportadora0.setTotalLucro(1081.009191);
      transportadora0.setTotalLucro(499.5);
      transportadora0.setValor_medio((-629.22364648));
      transportadora0.setNome("pQ}QMvLh$Y+-");
      transportadora0.setFormula((-945));
      transportadora0.setId((-945));
      Transportadora.setCodigo((-1932L));
      transportadora0.preco_transportadora3(974);
      transportadora0.setPremium(false);
      transportadora0.getValor_pequenas();
      transportadora0.getImpostos();
      transportadora0.getId();
      transportadora0.setValor_medio(0.0);
      transportadora0.isPremium();
      transportadora0.equals("pQ}QMvLh$Y+-");
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      transportadora0.setMargemlucro(430.7475833332);
      transportadora0.setValor_medio(0.0);
      Transportadora.setCodigo(0L);
      transportadora0.setFormula(0);
      transportadora0.formula2();
      transportadora0.setMargemlucro(430.7475833332);
      Transportadora transportadora1 = transportadora0.clone();
      transportadora1.setImpostos(430.7475833332);
      transportadora0.getValor_medio();
      transportadora0.getId();
      transportadora1.setValor_pequenas(0.0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Transportadora.setCodigo((-2873L));
      Transportadora transportadora0 = new Transportadora("", (-2873L), (-2873L), (-2873L), 1653.3580965910442, (-2873L), false, (-1878));
      Transportadora transportadora1 = new Transportadora(transportadora0);
      transportadora1.setImpostos((-2873L));
      Transportadora.getCodigo();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      transportadora0.setMargemlucro(1046.19);
      transportadora0.setNome(";^'M6=dZi!p");
      transportadora0.setId(4500L);
      transportadora0.formula2();
      transportadora0.getTotalLucro();
      transportadora0.setValor_grande((-3771.62190127117));
      transportadora0.setValor_medio(0.0);
      transportadora0.preco_transportadora3(5);
      transportadora0.getValor_grande();
      transportadora0.getId();
      transportadora0.getMargemlucro();
      transportadora0.setTotalLucro(4500L);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", (-5051.592015727922), (-5051.592015727922), (-5051.592015727922), (-5051.592015727922), 1133.037148904, false, 5);
      Transportadora transportadora1 = transportadora0.clone();
      Transportadora.criaCodigo();
      transportadora0.setImpostos(5);
      transportadora0.toString();
      transportadora0.preco_transportadora3(4153);
      transportadora1.setImpostos(2209.023630348403);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      transportadora0.setId(0L);
      transportadora0.setId(0L);
      transportadora0.preco_transportadora3(0);
      transportadora0.preco_transportadora1(143);
      transportadora0.setImpostos(0L);
      transportadora0.setValor_pequenas(143);
      transportadora0.preco_transportadora3(0);
      transportadora0.getTotalLucro();
      transportadora0.setMargemlucro(0L);
      transportadora0.formula3();
      transportadora0.setMargemlucro(0);
      transportadora0.setMargemlucro(0.0);
      transportadora0.setNome((String) null);
      transportadora0.getId();
      transportadora0.setId(0L);
      Transportadora transportadora1 = new Transportadora(transportadora0);
      // Undeclared exception!
      try { 
        transportadora0.equals(transportadora1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", 1768.95617, 1768.95617, 1768.95617, 1768.95617, 0.0, false, (-850));
      transportadora0.preco_transportadora2(111);
      transportadora0.clone();
      Transportadora transportadora1 = new Transportadora(transportadora0);
      transportadora1.setTotalLucro((-21.0));
      transportadora0.setValor_medio(0.0);
      transportadora1.setFormula(1);
      transportadora0.getValor_pequenas();
      transportadora0.getId();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      Transportadora transportadora1 = new Transportadora(transportadora0);
      transportadora1.setValor_medio(0.0);
      Transportadora transportadora2 = new Transportadora("", (-3077.0), 0.0, 0.0, 0.0, 0.0, true, 0);
      transportadora2.setValor_grande(0.0);
      transportadora1.equals(transportadora2);
      transportadora2.setValor_medio(0.0);
      transportadora0.formula3();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Transportadora transportadora0 = null;
      try {
        transportadora0 = new Transportadora((Transportadora) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Transportadora", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Transportadora.criaCodigo();
      Transportadora transportadora0 = new Transportadora("", 1L, (-1.0), 335.74, (-1.0), 1L, false, 0);
      transportadora0.getFormula();
      transportadora0.getId();
      transportadora0.formula1();
      transportadora0.getMargemlucro();
      transportadora0.setFormula(0);
      Transportadora transportadora1 = new Transportadora(transportadora0);
      transportadora0.equals(transportadora1);
      transportadora1.setValor_medio(0);
      transportadora0.setValor_grande(1.0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      transportadora0.setValor_pequenas((-2419.0015));
      transportadora0.getMargemlucro();
      transportadora0.setNome((String) null);
      transportadora0.clone();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", 0.0, 0.0, (-3237.3831692187), (-2831.3467), 0.0, false, 0);
      transportadora0.setId(0);
      transportadora0.preco_transportadora2(0);
      transportadora0.preco_transportadora3(0);
      transportadora0.setValor_pequenas((-1.0));
      transportadora0.setFormula(0);
      transportadora0.toString();
      transportadora0.setValor_pequenas(-0.0);
      transportadora0.setNome("");
      transportadora0.preco_transportadora1(0);
      transportadora0.setTotalLucro((-1.0));
      transportadora0.preco_transportadora2(0);
      transportadora0.clone();
      transportadora0.getImpostos();
      transportadora0.getTotalLucro();
      transportadora0.setTotalLucro((-2831.3467));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora(">8BR{HavHcim^G-N", 1389.4, 1389.4, 0.0, (-2117.700122691529), (-2117.700122691529), false, (-404));
      transportadora0.clone();
      transportadora0.toString();
      transportadora0.preco_transportadora3((-404));
      transportadora0.setImpostos((-404));
      transportadora0.isPremium();
      transportadora0.setFormula((-404));
      transportadora0.setFormula((-404));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", (-1059.80604), (-1059.80604), (-1059.80604), 0.0, (-1.0), false, (-274));
      transportadora0.getFormula();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      transportadora0.setMargemlucro(0.7);
      transportadora0.setMargemlucro((-1219.2));
      transportadora0.preco_transportadora3(880);
      transportadora0.setNome("");
      transportadora0.setValor_grande(8.26515280892271);
      transportadora0.preco_transportadora2(5);
      transportadora0.setImpostos(0.0);
      transportadora0.toString();
      transportadora0.getValor_pequenas();
      transportadora0.setImpostos(5);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", 1849.2998720123053, 1849.2998720123053, (-378.219625774), (-1.0), 991.08923919651, true, 3078);
      transportadora0.getFormula();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      transportadora0.setMargemlucro((-1673.7932));
      transportadora0.setValor_pequenas(169.504014677);
      Transportadora transportadora1 = new Transportadora(transportadora0);
      transportadora0.setTotalLucro(169.504014677);
      transportadora0.formula3();
      transportadora0.preco_transportadora2((-3118));
      transportadora1.getValor_pequenas();
      transportadora0.getValor_medio();
      transportadora0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", 54.0, 54.0, 1.0, 1.0, 1.0, false, 0);
      transportadora0.getValor_medio();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      transportadora0.toString();
      transportadora0.setMargemlucro(811.49535);
      transportadora0.setNome("");
      transportadora0.setValor_grande(811.49535);
      transportadora0.setValor_pequenas((-1231.11938));
      transportadora0.preco_transportadora3((-182));
      transportadora0.toString();
      transportadora0.getFormula();
      transportadora0.getNome();
      transportadora0.setId((-3051L));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("nr R3y5xh/ }2", 22.75481191399, 22.75481191399, 22.75481191399, 22.75481191399, (-751.2812685645), true, 2);
      transportadora0.getTotalLucro();
      Transportadora.criaCodigo();
      transportadora0.setMargemlucro(22.75481191399);
      transportadora0.getValor_grande();
      transportadora0.getImpostos();
      transportadora0.setPremium(true);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      Transportadora transportadora1 = new Transportadora(transportadora0);
      transportadora1.setImpostos(3885.5211258);
      transportadora1.setTotalLucro(1.0);
      transportadora1.equals(transportadora0);
      transportadora1.preco_transportadora1(3893);
      transportadora1.formula3();
      transportadora1.preco_transportadora2((-495));
      transportadora1.toString();
      transportadora0.setNome(".9(.!=K1f$a.z&DE");
      transportadora0.setTotalLucro(0.0);
      transportadora1.toString();
      transportadora0.setId(2385L);
      transportadora1.setTotalLucro(38.66239);
      transportadora1.setPremium(true);
      Transportadora.setCodigo((-1L));
      transportadora1.setFormula((-311));
      transportadora0.setPremium(false);
      transportadora0.setValor_medio(38.66239);
      transportadora0.preco_transportadora2((-2148));
      transportadora1.formula1();
      transportadora1.formula3();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      Transportadora transportadora1 = transportadora0.clone();
      transportadora1.preco_transportadora1((-1));
      transportadora0.setImpostos((-2791.248));
      transportadora0.setTotalLucro((-2791.248));
      transportadora0.getFormula();
      transportadora0.preco_transportadora1(1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Transportadora.setCodigo((-2793L));
      Transportadora transportadora0 = new Transportadora();
      transportadora0.setValor_medio(3342.432971625);
      transportadora0.setValor_medio((-2166.1327498));
      transportadora0.formula3();
      transportadora0.getImpostos();
      Transportadora transportadora1 = transportadora0.clone();
      transportadora1.setImpostos(1169.5381009805456);
      transportadora1.setMargemlucro((-2793L));
      transportadora0.isPremium();
      transportadora0.setMargemlucro((-2166.1327498));
      Transportadora transportadora2 = transportadora0.clone();
      transportadora2.setValor_medio(3963.3629);
      transportadora2.setValor_medio((-2793L));
      transportadora2.setTotalLucro(1169.5381009805456);
      Transportadora.criaCodigo();
      transportadora2.setValor_pequenas((-2793L));
      transportadora2.setTotalLucro(3342.432971625);
      transportadora0.getNome();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), false, 3289);
      Transportadora transportadora1 = transportadora0.clone();
      Transportadora.setCodigo((-1L));
      transportadora0.setPremium(true);
      transportadora0.setMargemlucro((-1.0));
      transportadora0.getValor_medio();
      transportadora0.getMargemlucro();
      transportadora0.preco_transportadora1(3289);
      transportadora0.preco_transportadora2(3289);
      transportadora1.getMargemlucro();
      transportadora0.formula3();
      transportadora1.preco_transportadora1((-3692));
      transportadora1.formula2();
      transportadora1.setValor_medio(0.0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("jU>$[6{{G!6ot$o_k", 2498.57623161, (-1.0), 2498.57623161, 946.9246442, (-1.0), true, 1);
      transportadora0.getNome();
      transportadora0.preco_transportadora2(0);
      transportadora0.setMargemlucro(5644.8);
      transportadora0.clone();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("k[?R.$AT*U--7d}g2", 0.0, 0.9, 0.9, 0.7, 0.7, true, 0);
      transportadora0.getValor_grande();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora(".W/:@@", 499.17274, 0.0, 1492.88037605, 1.0, 1492.88037605, true, 1);
      transportadora0.setFormula((-1096));
      transportadora0.setTotalLucro(1.0);
      transportadora0.preco_transportadora2(1);
      transportadora0.preco_transportadora3(1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      transportadora0.setValor_medio(3192.227727);
      transportadora0.preco_transportadora2(1);
      transportadora0.setNome("");
      transportadora0.getId();
      transportadora0.getFormula();
      transportadora0.formula1();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      Transportadora transportadora1 = new Transportadora(transportadora0);
      transportadora0.setMargemlucro(0.0);
      transportadora1.setMargemlucro(0.0);
      transportadora1.getTotalLucro();
      transportadora1.setValor_grande(363.1812513250187);
      transportadora1.getImpostos();
      transportadora1.setValor_medio(0.0);
      transportadora0.preco_transportadora3((-1));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      Transportadora transportadora1 = transportadora0.clone();
      transportadora0.setValor_medio(1.5);
      transportadora0.getMargemlucro();
      transportadora1.setValor_medio(0.0);
      Transportadora.setCodigo((-1689L));
      transportadora0.getImpostos();
      Transportadora.criaCodigo();
      transportadora0.isPremium();
      transportadora0.getNome();
      transportadora0.formula2();
      transportadora1.clone();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      Transportadora transportadora1 = new Transportadora(transportadora0);
      transportadora1.formula1();
      transportadora1.setValor_medio(3543.109);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora(" Valor da encomenda grande: ", 0.0, 1226.8522083636983, (-1731.725971), 0.0, (-1288.09174985), true, 0);
      Transportadora transportadora1 = new Transportadora(transportadora0);
      transportadora1.clone();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      Object object0 = new Object();
      transportadora0.clone();
      transportadora0.equals(object0);
      transportadora0.getValor_grande();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      transportadora0.setValor_medio((-1.0));
      transportadora0.setPremium(true);
      transportadora0.formula3();
      transportadora0.getId();
      transportadora0.getNome();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      Transportadora transportadora1 = new Transportadora(transportadora0);
      transportadora0.setImpostos((-3324.7993228896817));
      transportadora1.setPremium(false);
      transportadora1.getImpostos();
      transportadora0.toString();
      transportadora1.formula2();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("qtk#K", 0.0, 0.0, 0.0, 0.0, (-3243.109993), false, 5);
      Transportadora transportadora1 = new Transportadora(transportadora0);
      transportadora1.preco_transportadora1(5);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      transportadora0.setValor_grande((-1717.0));
      Transportadora transportadora1 = new Transportadora(transportadora0);
      transportadora1.preco_transportadora1(2067);
      transportadora1.setValor_pequenas(90.997135492);
      transportadora0.toString();
      transportadora1.preco_transportadora2(2281);
      transportadora1.setValor_grande(0.7);
      Transportadora.setCodigo(2281);
      transportadora1.setTotalLucro(0.7);
      transportadora1.setValor_pequenas((-1201.8999999999999));
      transportadora1.setImpostos((-1201.8999999999999));
      transportadora1.getValor_medio();
      transportadora0.preco_transportadora3(1);
      transportadora0.setImpostos((-2452.3843));
      transportadora0.preco_transportadora2(0);
      transportadora1.setId(0);
      transportadora0.equals(transportadora1);
      transportadora1.setMargemlucro(1);
      transportadora1.setValor_medio((-4747.39372));
      transportadora0.formula3();
      transportadora0.getValor_medio();
      transportadora1.setTotalLucro(0.0);
      transportadora1.setValor_grande(1);
      transportadora0.equals("Transportadora:: { Id: 1 Nome: Transportadora Invalida Valor da encomenda pequena: 0.0 Valor da encomenda m\u00E9dia: 0.0 Valor da encomenda grande: -1717.0 Imposto: 0.0 Margem de lucro: 0.0 \u00C9 premium: false Formula atual: 0 Total lucro: 0.0}");
      Transportadora.setCodigo(0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      transportadora0.setValor_medio(0.0);
      transportadora0.setImpostos(2125.8586447728057);
      transportadora0.preco_transportadora1(0);
      transportadora0.clone();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      transportadora0.setTotalLucro((-983.6784691));
      transportadora0.getNome();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      transportadora0.setPremium(true);
      transportadora0.toString();
      transportadora0.isPremium();
      transportadora0.preco_transportadora3(1);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      transportadora0.clone();
      transportadora0.setNome("");
      transportadora0.preco_transportadora2(63);
      transportadora0.setNome("");
      transportadora0.isPremium();
      transportadora0.toString();
      transportadora0.preco_transportadora3(823);
      Transportadora.setCodigo(63);
      transportadora0.getMargemlucro();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("kV!&qGi@Z<!", 1.0, 1.0, 200.275244, 200.275244, (-2665.0076414639), false, (-540));
      transportadora0.setNome("kV!&qGi@Z<!");
      transportadora0.preco_transportadora2((-984));
      Transportadora transportadora1 = new Transportadora(transportadora0);
      Transportadora.criaCodigo();
      transportadora0.equals(transportadora1);
      transportadora1.getMargemlucro();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      Transportadora transportadora1 = new Transportadora(transportadora0);
      transportadora1.getFormula();
      transportadora0.setPremium(false);
      transportadora1.setValor_medio(0);
      transportadora1.setMargemlucro((-1169.0));
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      Transportadora.setCodigo((-1570L));
      transportadora0.preco_transportadora2((-209));
      transportadora0.setValor_grande((-1570L));
      transportadora0.setId(763L);
      transportadora0.clone();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      transportadora0.setValor_pequenas((-2221));
      transportadora0.formula3();
      transportadora0.formula2();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      transportadora0.setValor_grande(0.0);
      transportadora0.setValor_pequenas(0.0);
      transportadora0.setValor_pequenas(475);
      transportadora0.preco_transportadora3(475);
      transportadora0.setFormula((-1));
      transportadora0.getMargemlucro();
      transportadora0.setFormula(475);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      transportadora0.preco_transportadora3((-2221));
      transportadora0.getValor_pequenas();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Transportadora.getCodigo();
      Transportadora transportadora0 = new Transportadora();
      transportadora0.preco_transportadora2(0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      transportadora0.preco_transportadora1(1340);
      transportadora0.getValor_pequenas();
      transportadora0.getFormula();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      transportadora0.setImpostos((-2600.4382717));
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      Transportadora transportadora1 = new Transportadora(transportadora0);
      transportadora1.preco_transportadora3(5);
      transportadora1.formula1();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Transportadora.criaCodigo();
      Transportadora transportadora0 = null;
      try {
        transportadora0 = new Transportadora((Transportadora) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Transportadora", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      transportadora0.setId((-1513L));
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      transportadora0.setValor_medio(0.0);
      transportadora0.getValor_medio();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      Transportadora transportadora1 = new Transportadora(transportadora0);
      transportadora0.setNome("DECMi&A*^H?K?GYLH");
      transportadora1.setMargemlucro((-225.287199));
      transportadora1.setValor_pequenas((-225.287199));
      transportadora0.setValor_medio(2549.87);
      transportadora1.setValor_pequenas(689.599627);
      transportadora1.toString();
      transportadora1.setFormula((-1790));
      transportadora1.preco_transportadora2(0);
      transportadora0.setMargemlucro(0.0);
      transportadora0.preco_transportadora2(0);
      transportadora1.equals(transportadora0);
      transportadora1.formula3();
      transportadora0.setId((-1790));
      transportadora0.preco_transportadora2((-1));
      transportadora1.clone();
      transportadora0.formula3();
      Object object0 = new Object();
      transportadora0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("'c?A`tfxv", (-225.287199), 356.49552624937, (-225.287199), (-225.287199), 356.49552624937, true, 2);
      Transportadora transportadora1 = transportadora0.clone();
      transportadora0.preco_transportadora1((-2255));
      transportadora1.setValor_medio(1474.31);
      transportadora0.setPremium(true);
      transportadora1.setMargemlucro((-390.0));
      transportadora0.toString();
      transportadora0.setPremium(true);
      transportadora0.preco_transportadora2(534);
      transportadora0.setMargemlucro(0.23968698811403932);
      transportadora1.setPremium(true);
      transportadora0.equals("'c?A`tfxv");
      transportadora1.setValor_grande(2094.4);
      Transportadora transportadora2 = transportadora0.clone();
      Transportadora.setCodigo(2);
      transportadora0.preco_transportadora1(1432);
      transportadora0.equals(transportadora2);
      transportadora2.equals("'c?A`tfxv");
      transportadora0.toString();
      transportadora2.preco_transportadora2(1432);
      transportadora0.clone();
      transportadora1.clone();
      transportadora0.preco_transportadora3(2);
      transportadora2.formula3();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      transportadora0.setValor_pequenas(1.5);
      Transportadora transportadora1 = new Transportadora(transportadora0);
      transportadora1.preco_transportadora2((-1));
      transportadora0.setValor_medio(0.0);
      transportadora1.preco_transportadora1(2180);
      transportadora0.setNome(" \u00C9 premium: ");
      Transportadora transportadora2 = transportadora1.clone();
      Transportadora.setCodigo((-1L));
      transportadora1.setTotalLucro(972.08483);
      transportadora0.equals(transportadora2);
      Transportadora transportadora3 = transportadora0.clone();
      transportadora3.setImpostos((-1));
      transportadora2.setValor_grande(0.0);
      transportadora1.setPremium(false);
      transportadora0.preco_transportadora2((-467));
      transportadora2.formula2();
      transportadora0.toString();
      Transportadora transportadora4 = transportadora0.clone();
      transportadora4.formula3();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("EM; P", (-869.5882), (-869.5882), (-869.5882), (-952.8), 0.0, false, 1432);
      transportadora0.setValor_pequenas(994.41451102449);
      Transportadora transportadora1 = new Transportadora(transportadora0);
      transportadora1.equals(transportadora0);
      transportadora0.formula2();
      Transportadora transportadora2 = transportadora1.clone();
      transportadora1.setImpostos(1241.6324560572903);
      transportadora0.setTotalLucro(1432);
      transportadora2.setFormula(1432);
      transportadora0.preco_transportadora1(1432);
      transportadora2.formula3();
      Transportadora transportadora3 = transportadora2.clone();
      transportadora3.toString();
      transportadora2.preco_transportadora1(1432);
      Transportadora.setCodigo((-1L));
      transportadora2.setMargemlucro(1.0);
      transportadora0.setFormula(1432);
      transportadora2.equals("EM; P");
      transportadora1.preco_transportadora3((-1810));
      transportadora0.formula2();
      transportadora3.equals(transportadora2);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      Transportadora transportadora1 = new Transportadora(transportadora0);
      transportadora1.setValor_medio(0.9);
      Transportadora.criaCodigo();
      transportadora1.preco_transportadora3(2);
      transportadora1.setPremium(false);
      transportadora1.preco_transportadora1(2);
      transportadora0.preco_transportadora1((-1));
      transportadora0.preco_transportadora2((-1782));
      Transportadora transportadora2 = transportadora1.clone();
      transportadora1.setTotalLucro(400.7);
      transportadora2.setValor_pequenas((-1782));
      transportadora2.setMargemlucro(0.0);
      transportadora2.setTotalLucro(0.9);
      transportadora2.setValor_grande(0.9);
      transportadora2.formula3();
      transportadora0.preco_transportadora2(1);
      transportadora0.preco_transportadora2(101);
      transportadora1.equals(transportadora0);
      transportadora1.toString();
      Transportadora transportadora3 = transportadora2.clone();
      transportadora3.toString();
      transportadora0.equals(transportadora3);
      transportadora3.toString();
      transportadora0.formula1();
      transportadora2.preco_transportadora2((-3612));
      transportadora3.preco_transportadora1((-3612));
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("HM=^Xf4F&", 1.6360592034094381, (-1546.1254057656), (-1546.1254057656), 1.6360592034094381, 1.6360592034094381, true, 72);
      Transportadora transportadora1 = transportadora0.clone();
      transportadora0.formula1();
      transportadora0.setTotalLucro(1154.7207738037773);
      transportadora0.setNome("HM=^Xf4F&");
      transportadora0.formula2();
      transportadora1.formula1();
      transportadora0.setMargemlucro(72);
      Transportadora transportadora2 = new Transportadora(transportadora0);
      transportadora2.setValor_pequenas((-1546.1254057656));
      transportadora1.setValor_medio((-1546.1254057656));
      transportadora2.preco_transportadora2(72);
      transportadora1.equals(transportadora2);
      transportadora0.preco_transportadora2(72);
      Transportadora.setCodigo(4L);
      transportadora0.formula1();
      transportadora0.formula2();
      transportadora2.clone();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora(",jbh;m\"!x", 0.7, (-1098.18607441), (-1098.18607441), 0.7, 0.0, false, 1672);
      transportadora0.preco_transportadora1(1672);
      Transportadora transportadora1 = new Transportadora(transportadora0);
      transportadora0.setImpostos((-1.0));
      transportadora1.toString();
      transportadora1.setFormula(3038);
      transportadora1.setPremium(false);
      transportadora0.equals(transportadora1);
      transportadora1.setTotalLucro((-1098.18607441));
      Transportadora.setCodigo(3038);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      Transportadora transportadora1 = new Transportadora();
      transportadora1.preco_transportadora1(1361);
      transportadora1.toString();
      transportadora0.setValor_pequenas(0.0);
      Transportadora transportadora2 = transportadora1.clone();
      transportadora1.formula1();
      transportadora1.setImpostos(1.0);
      transportadora0.formula2();
      transportadora1.formula2();
      transportadora1.formula3();
      transportadora1.preco_transportadora3(1361);
      transportadora1.formula2();
      Transportadora transportadora3 = transportadora1.clone();
      transportadora3.setPremium(true);
      transportadora0.equals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9");
      transportadora2.toString();
      transportadora3.toString();
      transportadora0.formula3();
      transportadora3.toString();
      transportadora2.preco_transportadora2(1361);
      transportadora3.formula2();
      Transportadora transportadora4 = transportadora3.clone();
      Transportadora transportadora5 = new Transportadora(transportadora4);
      transportadora5.setFormula(0);
      transportadora5.preco_transportadora3((-1310));
      transportadora1.equals(transportadora5);
      transportadora2.toString();
      transportadora4.formula3();
      transportadora3.clone();
      Transportadora.criaCodigo();
      transportadora4.formula2();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      transportadora0.setValor_grande((-1.0));
      transportadora0.setImpostos((-1.0));
      transportadora0.setValor_pequenas((-1.0));
      transportadora0.setImpostos(1.0);
      Transportadora transportadora1 = transportadora0.clone();
      transportadora0.equals(transportadora1);
      transportadora0.toString();
      transportadora0.setImpostos(1.0);
      transportadora1.preco_transportadora2((-1229));
      Transportadora transportadora2 = transportadora0.clone();
      Transportadora.setCodigo((-1229));
      Transportadora.criaCodigo();
      transportadora2.setId(754L);
      transportadora2.preco_transportadora2((-1229));
      Object object0 = new Object();
      transportadora0.equals(object0);
      transportadora1.formula2();
      transportadora2.formula2();
      transportadora1.formula2();
      transportadora0.equals((Object) null);
      transportadora1.preco_transportadora3((-1229));
      transportadora1.formula2();
      transportadora1.formula1();
      transportadora0.preco_transportadora1(0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora(" \u00C9 premium: ", 0.0, 1.0, (-2019.01127931347), (-2019.01127931347), 1.0, false, 5);
      transportadora0.setValor_medio(0.0);
      transportadora0.getId();
      Transportadora transportadora1 = transportadora0.clone();
      transportadora0.preco_transportadora1(5);
      transportadora1.setFormula(1390);
      transportadora0.setImpostos(5);
      transportadora0.setNome("9,Bycyk5{t");
      Transportadora.criaCodigo();
      transportadora1.setNome("");
      transportadora0.setValor_grande(0.0);
      transportadora0.setPremium(false);
      transportadora1.preco_transportadora1(5);
      transportadora1.setId(596L);
      transportadora0.equals(transportadora1);
      transportadora1.toString();
      transportadora1.getValor_pequenas();
      Transportadora.setCodigo((-1216L));
      transportadora1.setMargemlucro(0.0);
      transportadora0.preco_transportadora1(1390);
      transportadora1.setPremium(true);
      transportadora0.getValor_grande();
      transportadora0.getId();
      Transportadora transportadora2 = transportadora1.clone();
      transportadora2.preco_transportadora2(5);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      assertNotNull(transportadora0);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      
      Transportadora transportadora1 = new Transportadora(transportadora0);
      assertNotNull(transportadora1);
      assertTrue(transportadora1.equals((Object)transportadora0));
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertEquals(1L, transportadora1.getId());
      assertEquals(0.0, transportadora1.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals(0.0, transportadora1.getMargemlucro(), 0.01);
      assertEquals(2L, transportadora1.getCodigo());
      assertEquals(0.0, transportadora1.getImpostos(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals(0.0, transportadora1.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora1.getTotalLucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertEquals("Transportadora Invalida", transportadora1.getNome());
      assertEquals(0, transportadora1.getFormula());
      assertFalse(transportadora1.isPremium());
      assertEquals(0.0, transportadora1.getValor_pequenas(), 0.01);
      
      String string0 = transportadora0.toString();
      assertNotNull(string0);
      assertTrue(transportadora0.equals((Object)transportadora1));
      assertEquals("Transportadora:: { Id: 1 Nome: Transportadora Invalida Valor da encomenda pequena: 0.0 Valor da encomenda m\u00E9dia: 0.0 Valor da encomenda grande: 0.0 Imposto: 0.0 Margem de lucro: 0.0 \u00C9 premium: false Formula atual: 0 Total lucro: 0.0}", string0);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertNotSame(transportadora0, transportadora1);
      
      transportadora1.setTotalLucro((-1769.80913804));
      assertFalse(transportadora0.equals((Object)transportadora1));
      assertFalse(transportadora1.equals((Object)transportadora0));
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertEquals(1L, transportadora1.getId());
      assertEquals(0.0, transportadora1.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals(0.0, transportadora1.getMargemlucro(), 0.01);
      assertEquals(2L, transportadora1.getCodigo());
      assertEquals(0.0, transportadora1.getImpostos(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals(0.0, transportadora1.getValor_grande(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertEquals("Transportadora Invalida", transportadora1.getNome());
      assertEquals(0, transportadora1.getFormula());
      assertFalse(transportadora1.isPremium());
      assertEquals(0.0, transportadora1.getValor_pequenas(), 0.01);
      assertEquals((-1769.80913804), transportadora1.getTotalLucro(), 0.01);
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
      
      transportadora1.setValor_grande((-1461.32141171981));
      assertFalse(transportadora0.equals((Object)transportadora1));
      assertFalse(transportadora1.equals((Object)transportadora0));
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertEquals(1L, transportadora1.getId());
      assertEquals(0.0, transportadora1.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals(0.0, transportadora1.getMargemlucro(), 0.01);
      assertEquals(2L, transportadora1.getCodigo());
      assertEquals((-1461.32141171981), transportadora1.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora1.getImpostos(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertEquals("Transportadora Invalida", transportadora1.getNome());
      assertEquals(0, transportadora1.getFormula());
      assertFalse(transportadora1.isPremium());
      assertEquals(0.0, transportadora1.getValor_pequenas(), 0.01);
      assertEquals((-1769.80913804), transportadora1.getTotalLucro(), 0.01);
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
      
      transportadora0.setValor_medio((-1769.80913804));
      assertFalse(transportadora0.equals((Object)transportadora1));
      assertEquals((-1769.80913804), transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1L, transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertNotSame(transportadora0, transportadora1);
      
      String string1 = transportadora1.formula3();
      assertNotNull(string1);
      assertFalse(transportadora0.equals((Object)transportadora1));
      assertFalse(transportadora1.equals((Object)transportadora0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", string1);
      assertEquals((-1769.80913804), transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1L, transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertEquals(1L, transportadora1.getId());
      assertEquals(0.0, transportadora1.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals(0.0, transportadora1.getMargemlucro(), 0.01);
      assertEquals(2L, transportadora1.getCodigo());
      assertEquals((-1461.32141171981), transportadora1.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora1.getImpostos(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertEquals("Transportadora Invalida", transportadora1.getNome());
      assertEquals(0, transportadora1.getFormula());
      assertFalse(transportadora1.isPremium());
      assertEquals(0.0, transportadora1.getValor_pequenas(), 0.01);
      assertEquals((-1769.80913804), transportadora1.getTotalLucro(), 0.01);
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
      
      transportadora0.setNome("Transportadora:: { Id: 1 Nome: Transportadora Invalida Valor da encomenda pequena: 0.0 Valor da encomenda m\u00E9dia: 0.0 Valor da encomenda grande: 0.0 Imposto: 0.0 Margem de lucro: 0.0 \u00C9 premium: false Formula atual: 0 Total lucro: 0.0}");
      assertFalse(transportadora0.equals((Object)transportadora1));
      assertEquals((-1769.80913804), transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals("Transportadora:: { Id: 1 Nome: Transportadora Invalida Valor da encomenda pequena: 0.0 Valor da encomenda m\u00E9dia: 0.0 Valor da encomenda grande: 0.0 Imposto: 0.0 Margem de lucro: 0.0 \u00C9 premium: false Formula atual: 0 Total lucro: 0.0}", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1L, transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertNotSame(transportadora0, transportadora1);
      
      transportadora0.setMargemlucro(1299.7364545222558);
      assertFalse(transportadora0.equals((Object)transportadora1));
      assertEquals((-1769.80913804), transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1299.7364545222558, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals("Transportadora:: { Id: 1 Nome: Transportadora Invalida Valor da encomenda pequena: 0.0 Valor da encomenda m\u00E9dia: 0.0 Valor da encomenda grande: 0.0 Imposto: 0.0 Margem de lucro: 0.0 \u00C9 premium: false Formula atual: 0 Total lucro: 0.0}", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1L, transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertNotSame(transportadora0, transportadora1);
      
      transportadora0.setNome("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5");
      assertFalse(transportadora0.equals((Object)transportadora1));
      assertEquals((-1769.80913804), transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1299.7364545222558, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1L, transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.getNome());
      assertNotSame(transportadora0, transportadora1);
      
      Transportadora.setCodigo((-1278L));
      String string2 = transportadora0.toString();
      assertNotNull(string2);
      assertFalse(transportadora0.equals((Object)transportadora1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Transportadora:: { Id: 1 Nome: (ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5 Valor da encomenda pequena: 0.0 Valor da encomenda m\u00E9dia: -1769.80913804 Valor da encomenda grande: 0.0 Imposto: 0.0 Margem de lucro: 1299.7364545222558 \u00C9 premium: false Formula atual: 0 Total lucro: 0.0}", string2);
      assertEquals((-1769.80913804), transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1299.7364545222558, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals((-1278L), transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1L, transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.getNome());
      assertNotSame(transportadora0, transportadora1);
      
      double double0 = transportadora0.preco_transportadora3(0);
      assertFalse(transportadora0.equals((Object)transportadora1));
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1769.80913804), transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1299.7364545222558, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals((-1278L), transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1L, transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.getNome());
      assertNotSame(transportadora0, transportadora1);
      
      double double1 = transportadora0.preco_transportadora1(0);
      assertFalse(transportadora0.equals((Object)transportadora1));
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals((-1769.80913804), transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1299.7364545222558, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals((-1278L), transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1L, transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.getNome());
      assertNotSame(transportadora0, transportadora1);
      
      String string3 = transportadora1.formula3();
      assertNotNull(string3);
      assertFalse(transportadora0.equals((Object)transportadora1));
      assertFalse(transportadora1.equals((Object)transportadora0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", string3);
      assertEquals((-1769.80913804), transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1299.7364545222558, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals((-1278L), transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1L, transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.getNome());
      assertEquals(1L, transportadora1.getId());
      assertEquals(0.0, transportadora1.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals(0.0, transportadora1.getMargemlucro(), 0.01);
      assertEquals((-1461.32141171981), transportadora1.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora1.getImpostos(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertEquals("Transportadora Invalida", transportadora1.getNome());
      assertEquals(0, transportadora1.getFormula());
      assertFalse(transportadora1.isPremium());
      assertEquals(0.0, transportadora1.getValor_pequenas(), 0.01);
      assertEquals((-1769.80913804), transportadora1.getTotalLucro(), 0.01);
      assertEquals((-1278L), transportadora1.getCodigo());
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
      
      long long0 = Transportadora.getCodigo();
      assertEquals((-1278L), long0);
      
      long long1 = transportadora1.getId();
      assertFalse(long1 == long0);
      assertFalse(transportadora0.equals((Object)transportadora1));
      assertFalse(transportadora1.equals((Object)transportadora0));
      assertEquals(1L, long1);
      assertEquals((-1769.80913804), transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1299.7364545222558, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals((-1278L), transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1L, transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.getNome());
      assertEquals(1L, transportadora1.getId());
      assertEquals(0.0, transportadora1.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals(0.0, transportadora1.getMargemlucro(), 0.01);
      assertEquals((-1461.32141171981), transportadora1.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora1.getImpostos(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertEquals("Transportadora Invalida", transportadora1.getNome());
      assertEquals(0, transportadora1.getFormula());
      assertFalse(transportadora1.isPremium());
      assertEquals(0.0, transportadora1.getValor_pequenas(), 0.01);
      assertEquals((-1769.80913804), transportadora1.getTotalLucro(), 0.01);
      assertEquals((-1278L), transportadora1.getCodigo());
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
      
      double double2 = transportadora0.preco_transportadora2((-741));
      assertFalse(transportadora0.equals((Object)transportadora1));
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals((-1769.80913804), transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1299.7364545222558, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals((-1278L), transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1L, transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.getNome());
      assertNotSame(transportadora0, transportadora1);
      
      double double3 = transportadora0.preco_transportadora3(5);
      assertFalse(transportadora0.equals((Object)transportadora1));
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals((-3450428.1813857993), double3, 0.01);
      assertEquals((-1769.80913804), transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1299.7364545222558, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals((-1278L), transportadora0.getCodigo());
      assertEquals((-3450428.1813857993), transportadora0.getTotalLucro(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1L, transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.getNome());
      assertNotSame(transportadora0, transportadora1);
      
      String string4 = transportadora0.toString();
      assertNotNull(string4);
      assertFalse(transportadora0.equals((Object)transportadora1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("Transportadora:: { Id: 1 Nome: (ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5 Valor da encomenda pequena: 0.0 Valor da encomenda m\u00E9dia: -1769.80913804 Valor da encomenda grande: 0.0 Imposto: 0.0 Margem de lucro: 1299.7364545222558 \u00C9 premium: false Formula atual: 0 Total lucro: -3450428.1813857993}", string4);
      assertEquals((-1769.80913804), transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1299.7364545222558, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals((-1278L), transportadora0.getCodigo());
      assertEquals((-3450428.1813857993), transportadora0.getTotalLucro(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1L, transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.getNome());
      assertNotSame(transportadora0, transportadora1);
      
      boolean boolean0 = transportadora0.equals(transportadora1);
      assertFalse(transportadora0.equals((Object)transportadora1));
      assertFalse(transportadora1.equals((Object)transportadora0));
      assertFalse(boolean0);
      assertEquals((-1769.80913804), transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1299.7364545222558, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals((-1278L), transportadora0.getCodigo());
      assertEquals((-3450428.1813857993), transportadora0.getTotalLucro(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1L, transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.getNome());
      assertEquals(1L, transportadora1.getId());
      assertEquals(0.0, transportadora1.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals(0.0, transportadora1.getMargemlucro(), 0.01);
      assertEquals((-1461.32141171981), transportadora1.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora1.getImpostos(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertEquals("Transportadora Invalida", transportadora1.getNome());
      assertEquals(0, transportadora1.getFormula());
      assertFalse(transportadora1.isPremium());
      assertEquals(0.0, transportadora1.getValor_pequenas(), 0.01);
      assertEquals((-1769.80913804), transportadora1.getTotalLucro(), 0.01);
      assertEquals((-1278L), transportadora1.getCodigo());
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
      
      String string5 = transportadora0.formula1();
      assertNotNull(string5);
      assertFalse(transportadora0.equals((Object)transportadora1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", string5);
      assertEquals((-1769.80913804), transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1299.7364545222558, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals((-1278L), transportadora0.getCodigo());
      assertEquals((-3450428.1813857993), transportadora0.getTotalLucro(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1L, transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.getNome());
      assertNotSame(transportadora0, transportadora1);
      
      double double4 = transportadora0.preco_transportadora3(5);
      assertFalse(transportadora0.equals((Object)transportadora1));
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals((-3450428.1813857993), double4, 0.01);
      assertEquals((-1769.80913804), transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals((-6900856.362771599), transportadora0.getTotalLucro(), 0.01);
      assertEquals(1299.7364545222558, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals((-1278L), transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1L, transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.getNome());
      assertNotSame(transportadora0, transportadora1);
      
      double double5 = transportadora0.preco_transportadora1((-741));
      assertFalse(transportadora0.equals((Object)transportadora1));
      assertNotEquals(double5, double4, 0.01);
      assertEquals(double5, double2, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertEquals(double5, double1, 0.01);
      assertEquals(double5, double0, 0.01);
      assertEquals(0.0, double5, 0.01);
      assertEquals((-1769.80913804), transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals((-6900856.362771599), transportadora0.getTotalLucro(), 0.01);
      assertEquals(1299.7364545222558, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals((-1278L), transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1L, transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.getNome());
      assertNotSame(transportadora0, transportadora1);
      
      Transportadora transportadora2 = transportadora0.clone();
      assertNotNull(transportadora2);
      assertFalse(transportadora0.equals((Object)transportadora1));
      assertTrue(transportadora2.equals((Object)transportadora0));
      assertFalse(transportadora2.equals((Object)transportadora1));
      assertEquals((-1769.80913804), transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals((-6900856.362771599), transportadora0.getTotalLucro(), 0.01);
      assertEquals(1299.7364545222558, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals((-1278L), transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1L, transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.getNome());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora2.getNome());
      assertEquals(0.0, transportadora2.getValor_grande(), 0.01);
      assertEquals(1L, transportadora2.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora2.formula3());
      assertEquals((-6900856.362771599), transportadora2.getTotalLucro(), 0.01);
      assertEquals(0.0, transportadora2.getValor_pequenas(), 0.01);
      assertEquals((-1278L), transportadora2.getCodigo());
      assertEquals((-1769.80913804), transportadora2.getValor_medio(), 0.01);
      assertEquals(0, transportadora2.getFormula());
      assertEquals(1299.7364545222558, transportadora2.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora2.getImpostos(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora2.formula2());
      assertFalse(transportadora2.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora2.formula1());
      assertNotSame(transportadora0, transportadora2);
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora2, transportadora0);
      assertNotSame(transportadora2, transportadora1);
      
      double double6 = transportadora0.preco_transportadora1((-656));
      assertTrue(transportadora0.equals((Object)transportadora2));
      assertFalse(transportadora0.equals((Object)transportadora1));
      assertEquals(double6, double1, 0.01);
      assertEquals(double6, double0, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertEquals(double6, double5, 0.01);
      assertEquals(double6, double2, 0.01);
      assertEquals(0.0, double6, 0.01);
      assertEquals((-1769.80913804), transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals((-6900856.362771599), transportadora0.getTotalLucro(), 0.01);
      assertEquals(1299.7364545222558, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals((-1278L), transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1L, transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.getNome());
      assertNotSame(transportadora0, transportadora2);
      assertNotSame(transportadora0, transportadora1);
      
      double double7 = transportadora1.preco_transportadora2((-741));
      assertTrue(transportadora0.equals((Object)transportadora2));
      assertFalse(transportadora0.equals((Object)transportadora1));
      assertFalse(transportadora1.equals((Object)transportadora0));
      assertFalse(transportadora1.equals((Object)transportadora2));
      assertEquals(double7, double0, 0.01);
      assertEquals(double7, double2, 0.01);
      assertEquals(double7, double5, 0.01);
      assertEquals(double7, double6, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertEquals(double7, double1, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertEquals(0.0, double7, 0.01);
      assertEquals((-1769.80913804), transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals((-6900856.362771599), transportadora0.getTotalLucro(), 0.01);
      assertEquals(1299.7364545222558, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals((-1278L), transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1L, transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.getNome());
      assertEquals(1L, transportadora1.getId());
      assertEquals(0.0, transportadora1.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals(0.0, transportadora1.getMargemlucro(), 0.01);
      assertEquals((-1461.32141171981), transportadora1.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora1.getImpostos(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertEquals("Transportadora Invalida", transportadora1.getNome());
      assertEquals(0, transportadora1.getFormula());
      assertFalse(transportadora1.isPremium());
      assertEquals(0.0, transportadora1.getValor_pequenas(), 0.01);
      assertEquals((-1769.80913804), transportadora1.getTotalLucro(), 0.01);
      assertEquals((-1278L), transportadora1.getCodigo());
      assertNotSame(transportadora0, transportadora2);
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
      assertNotSame(transportadora1, transportadora2);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      long long0 = Transportadora.criaCodigo();
      assertEquals(1L, long0);
      
      Transportadora transportadora0 = new Transportadora();
      assertNotNull(transportadora0);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(3L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertFalse(transportadora0.isPremium());
      assertEquals(2L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      
      double double0 = transportadora0.preco_transportadora3(1);
      assertEquals(0.0, double0, 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(3L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertFalse(transportadora0.isPremium());
      assertEquals(2L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      
      String string0 = transportadora0.toString();
      assertNotNull(string0);
      assertEquals("Transportadora:: { Id: 2 Nome: Transportadora Invalida Valor da encomenda pequena: 0.0 Valor da encomenda m\u00E9dia: 0.0 Valor da encomenda grande: 0.0 Imposto: 0.0 Margem de lucro: 0.0 \u00C9 premium: false Formula atual: 0 Total lucro: 0.0}", string0);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(3L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertFalse(transportadora0.isPremium());
      assertEquals(2L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      long long0 = Transportadora.criaCodigo();
      assertEquals(1L, long0);
      
      Transportadora transportadora0 = new Transportadora("D", 1L, (-1.0), 335.74, (-1.0), 1L, false, 0);
      assertNotNull(transportadora0);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals((-1.0), transportadora0.getImpostos(), 0.01);
      assertEquals(3L, transportadora0.getCodigo());
      assertEquals(2L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(335.74, transportadora0.getValor_grande(), 0.01);
      assertEquals(1.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals("D", transportadora0.getNome());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0, transportadora0.getFormula());
      assertEquals((-1.0), transportadora0.getValor_medio(), 0.01);
      
      long long1 = Transportadora.criaCodigo();
      assertFalse(long1 == long0);
      assertEquals(3L, long1);
      
      String string0 = transportadora0.formula1();
      assertNotNull(string0);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", string0);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals((-1.0), transportadora0.getImpostos(), 0.01);
      assertEquals(2L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(4L, transportadora0.getCodigo());
      assertFalse(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(335.74, transportadora0.getValor_grande(), 0.01);
      assertEquals(1.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals("D", transportadora0.getNome());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0, transportadora0.getFormula());
      assertEquals((-1.0), transportadora0.getValor_medio(), 0.01);
      
      double double0 = transportadora0.getMargemlucro();
      assertEquals(1.0, double0, 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals((-1.0), transportadora0.getImpostos(), 0.01);
      assertEquals(2L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(4L, transportadora0.getCodigo());
      assertFalse(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(335.74, transportadora0.getValor_grande(), 0.01);
      assertEquals(1.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals("D", transportadora0.getNome());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0, transportadora0.getFormula());
      assertEquals((-1.0), transportadora0.getValor_medio(), 0.01);
      
      double double1 = transportadora0.preco_transportadora2((-1870));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals((-1.0), transportadora0.getImpostos(), 0.01);
      assertEquals(2L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(4L, transportadora0.getCodigo());
      assertFalse(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(335.74, transportadora0.getValor_grande(), 0.01);
      assertEquals(1.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals("D", transportadora0.getNome());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0, transportadora0.getFormula());
      assertEquals((-1.0), transportadora0.getValor_medio(), 0.01);
      
      transportadora0.setNome("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5");
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals((-1.0), transportadora0.getImpostos(), 0.01);
      assertEquals(2L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(4L, transportadora0.getCodigo());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.getNome());
      assertFalse(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(335.74, transportadora0.getValor_grande(), 0.01);
      assertEquals(1.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0, transportadora0.getFormula());
      assertEquals((-1.0), transportadora0.getValor_medio(), 0.01);
      
      Transportadora transportadora1 = transportadora0.clone();
      assertNotNull(transportadora1);
      assertTrue(transportadora1.equals((Object)transportadora0));
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals((-1.0), transportadora0.getImpostos(), 0.01);
      assertEquals(2L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(4L, transportadora0.getCodigo());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.getNome());
      assertFalse(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(335.74, transportadora0.getValor_grande(), 0.01);
      assertEquals(1.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0, transportadora0.getFormula());
      assertEquals((-1.0), transportadora0.getValor_medio(), 0.01);
      assertEquals(1.0, transportadora1.getValor_pequenas(), 0.01);
      assertEquals((-1.0), transportadora1.getImpostos(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals(0.0, transportadora1.getTotalLucro(), 0.01);
      assertEquals(4L, transportadora1.getCodigo());
      assertEquals(2L, transportadora1.getId());
      assertFalse(transportadora1.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertEquals(335.74, transportadora1.getValor_grande(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.getNome());
      assertEquals(1.0, transportadora1.getMargemlucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals(0, transportadora1.getFormula());
      assertEquals((-1.0), transportadora1.getValor_medio(), 0.01);
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
      
      boolean boolean0 = transportadora0.equals(transportadora0);
      assertTrue(transportadora0.equals((Object)transportadora1));
      assertTrue(boolean0);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals((-1.0), transportadora0.getImpostos(), 0.01);
      assertEquals(2L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(4L, transportadora0.getCodigo());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.getNome());
      assertFalse(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(335.74, transportadora0.getValor_grande(), 0.01);
      assertEquals(1.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0, transportadora0.getFormula());
      assertEquals((-1.0), transportadora0.getValor_medio(), 0.01);
      assertNotSame(transportadora0, transportadora1);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      assertNotNull(transportadora0);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      
      long long0 = Transportadora.criaCodigo();
      assertEquals(2L, long0);
      
      transportadora0.setValor_medio(0.0);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(3L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      
      transportadora0.setId(0L);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(3L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      
      Transportadora.setCodigo(2L);
      double double0 = transportadora0.preco_transportadora2(2137);
      assertEquals(0.0, double0, 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      
      double double1 = transportadora0.getValor_grande();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      
      double double2 = transportadora0.getTotalLucro();
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      
      long long1 = Transportadora.getCodigo();
      assertTrue(long1 == long0);
      assertEquals(2L, long1);
      
      long long2 = transportadora0.getId();
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals(0L, long2);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      
      long long3 = transportadora0.getId();
      assertTrue(long3 == long2);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      assertEquals(0L, long3);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      
      Transportadora transportadora1 = new Transportadora(transportadora0);
      assertNotNull(transportadora1);
      assertTrue(transportadora1.equals((Object)transportadora0));
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0L, transportadora1.getId());
      assertEquals(2L, transportadora1.getCodigo());
      assertEquals(0.0, transportadora1.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora1.getValor_grande(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals(0.0, transportadora1.getMargemlucro(), 0.01);
      assertEquals("Transportadora Invalida", transportadora1.getNome());
      assertEquals(0, transportadora1.getFormula());
      assertEquals(0.0, transportadora1.getValor_pequenas(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertEquals(0.0, transportadora1.getImpostos(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals(0.0, transportadora1.getTotalLucro(), 0.01);
      assertFalse(transportadora1.isPremium());
      
      transportadora1.setFormula(1489);
      assertFalse(transportadora0.equals((Object)transportadora1));
      assertFalse(transportadora1.equals((Object)transportadora0));
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0L, transportadora1.getId());
      assertEquals(2L, transportadora1.getCodigo());
      assertEquals(0.0, transportadora1.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora1.getValor_grande(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals(0.0, transportadora1.getMargemlucro(), 0.01);
      assertEquals("Transportadora Invalida", transportadora1.getNome());
      assertEquals(0.0, transportadora1.getValor_pequenas(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertEquals(0.0, transportadora1.getImpostos(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals(1489, transportadora1.getFormula());
      assertEquals(0.0, transportadora1.getTotalLucro(), 0.01);
      assertFalse(transportadora1.isPremium());
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
      
      transportadora1.setFormula(2137);
      assertFalse(transportadora0.equals((Object)transportadora1));
      assertFalse(transportadora1.equals((Object)transportadora0));
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0L, transportadora1.getId());
      assertEquals(2L, transportadora1.getCodigo());
      assertEquals(0.0, transportadora1.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora1.getValor_grande(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals(0.0, transportadora1.getMargemlucro(), 0.01);
      assertEquals("Transportadora Invalida", transportadora1.getNome());
      assertEquals(0.0, transportadora1.getValor_pequenas(), 0.01);
      assertEquals(2137, transportadora1.getFormula());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertEquals(0.0, transportadora1.getImpostos(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals(0.0, transportadora1.getTotalLucro(), 0.01);
      assertFalse(transportadora1.isPremium());
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
      
      double double3 = transportadora1.preco_transportadora1(2137);
      assertFalse(transportadora0.equals((Object)transportadora1));
      assertFalse(transportadora1.equals((Object)transportadora0));
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(0.0, double3, 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0L, transportadora1.getId());
      assertEquals(2L, transportadora1.getCodigo());
      assertEquals(0.0, transportadora1.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora1.getValor_grande(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals(0.0, transportadora1.getMargemlucro(), 0.01);
      assertEquals("Transportadora Invalida", transportadora1.getNome());
      assertEquals(0.0, transportadora1.getValor_pequenas(), 0.01);
      assertEquals(2137, transportadora1.getFormula());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertEquals(0.0, transportadora1.getImpostos(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals(0.0, transportadora1.getTotalLucro(), 0.01);
      assertFalse(transportadora1.isPremium());
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
      
      boolean boolean0 = transportadora0.equals(transportadora1);
      assertFalse(transportadora0.equals((Object)transportadora1));
      assertFalse(transportadora1.equals((Object)transportadora0));
      assertFalse(boolean0);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0L, transportadora1.getId());
      assertEquals(2L, transportadora1.getCodigo());
      assertEquals(0.0, transportadora1.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora1.getValor_grande(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals(0.0, transportadora1.getMargemlucro(), 0.01);
      assertEquals("Transportadora Invalida", transportadora1.getNome());
      assertEquals(0.0, transportadora1.getValor_pequenas(), 0.01);
      assertEquals(2137, transportadora1.getFormula());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertEquals(0.0, transportadora1.getImpostos(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals(0.0, transportadora1.getTotalLucro(), 0.01);
      assertFalse(transportadora1.isPremium());
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
      
      double double4 = transportadora1.getTotalLucro();
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(double4, double2, 0.01);
      assertFalse(transportadora0.equals((Object)transportadora1));
      assertFalse(transportadora1.equals((Object)transportadora0));
      assertEquals(0.0, double4, 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0L, transportadora1.getId());
      assertEquals(2L, transportadora1.getCodigo());
      assertEquals(0.0, transportadora1.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora1.getValor_grande(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals(0.0, transportadora1.getMargemlucro(), 0.01);
      assertEquals("Transportadora Invalida", transportadora1.getNome());
      assertEquals(0.0, transportadora1.getValor_pequenas(), 0.01);
      assertEquals(2137, transportadora1.getFormula());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertEquals(0.0, transportadora1.getImpostos(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals(0.0, transportadora1.getTotalLucro(), 0.01);
      assertFalse(transportadora1.isPremium());
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
      
      double double5 = transportadora1.preco_transportadora1(1);
      assertFalse(transportadora0.equals((Object)transportadora1));
      assertEquals(double5, double1, 0.01);
      assertEquals(double5, double2, 0.01);
      assertEquals(double5, double3, 0.01);
      assertEquals(double5, double0, 0.01);
      assertEquals(double5, double4, 0.01);
      assertFalse(transportadora1.equals((Object)transportadora0));
      assertEquals(0.0, double5, 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0L, transportadora1.getId());
      assertEquals(2L, transportadora1.getCodigo());
      assertEquals(0.0, transportadora1.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora1.getValor_grande(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals(0.0, transportadora1.getMargemlucro(), 0.01);
      assertEquals("Transportadora Invalida", transportadora1.getNome());
      assertEquals(0.0, transportadora1.getValor_pequenas(), 0.01);
      assertEquals(2137, transportadora1.getFormula());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertEquals(0.0, transportadora1.getImpostos(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals(0.0, transportadora1.getTotalLucro(), 0.01);
      assertFalse(transportadora1.isPremium());
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", 0.0, (-1224.97817), 0.0, (-1224.97817), (-2017.3), false, (-1));
      transportadora0.setPremium(false);
      transportadora0.setMargemlucro(0.0);
      transportadora0.preco_transportadora2(0);
      transportadora0.preco_transportadora2((-1));
      Transportadora.criaCodigo();
      transportadora0.setValor_pequenas(970.55);
      transportadora0.setImpostos((-3801.9188197628));
      transportadora0.getMargemlucro();
      transportadora0.preco_transportadora1((-1));
      transportadora0.setMargemlucro(1.5);
      transportadora0.getTotalLucro();
      transportadora0.getMargemlucro();
      transportadora0.getImpostos();
      Transportadora.getCodigo();
      transportadora0.formula2();
      Transportadora.getCodigo();
      transportadora0.formula2();
      assertEquals(970.55, transportadora0.getValor_pequenas(), 0.01);
  }
}
