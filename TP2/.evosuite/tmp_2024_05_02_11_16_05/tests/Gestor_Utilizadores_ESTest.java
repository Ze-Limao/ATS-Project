/*
 * This file was automatically generated by EvoSuite
 * Thu May 02 10:45:31 GMT 2024
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.LocalDate;
import java.time.Month;
import java.time.ZoneId;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Gestor_Utilizadores_ESTest extends Gestor_Utilizadores_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.imprime1FaturaVenda((-479L), (-1597L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.adicionaFaturaVendedor((-4838L), false, 2732L, 2732L, "\n", (-4838L), false, (-4838L), 2732L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.adicionaFaturaComprador(0L, false, 523L, 1884L, linkedHashSet0, (-515.85), 523L, 1884L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      long long0 = gestor_Utilizadores0.adicionaUtilizador("eR1v&{'N?v}T&", (String) null, "eR1v&{'N?v}T&", 1L, "eR1v&{'N?v}T&");
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Long, Utilizador> hashMap0 = new HashMap<Long, Utilizador>();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      HashMap<String, Long> hashMap1 = new HashMap<String, Long>();
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores(hashMap0, map0, hashMap1);
      long long0 = gestor_Utilizadores0.verificaPassword("m3[2virp*en|UP:Eqv9", "");
      assertEquals((-2L), long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Long, Utilizador> hashMap0 = new HashMap<Long, Utilizador>();
      Long long0 = new Long(0L);
      Utilizador utilizador0 = new Utilizador();
      hashMap0.put(long0, utilizador0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, Long> hashMap2 = new HashMap<String, Long>();
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores(hashMap0, hashMap1, hashMap2);
      gestor_Utilizadores0.novoCarrinho(0L);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Long, Utilizador> hashMap0 = new HashMap<Long, Utilizador>();
      Long long0 = new Long(0L);
      Utilizador utilizador0 = new Utilizador();
      hashMap0.put(long0, utilizador0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, Long> hashMap2 = new HashMap<String, Long>();
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores(hashMap0, hashMap1, hashMap2);
      gestor_Utilizadores0.alteraQuantiVendida(0L, 0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Long, Utilizador> hashMap0 = new HashMap<Long, Utilizador>();
      Long long0 = new Long(0L);
      Utilizador utilizador0 = new Utilizador();
      hashMap0.put(long0, utilizador0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, Long> hashMap2 = new HashMap<String, Long>();
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores(hashMap0, hashMap1, hashMap2);
      gestor_Utilizadores0.adicionaFaturaVendedor(0L, true, 0L, (-1512L), "", 1162.5221743966013, false, (-1.0), 1162.5221743966013);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Long, Utilizador> hashMap0 = new HashMap<Long, Utilizador>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, Long> hashMap2 = new HashMap<String, Long>();
      Long long0 = new Long((-1L));
      Utilizador utilizador0 = new Utilizador("", "~5DS8/1$<^\"N3:ZfB", "", long0, "~5DS8/1$<^\"N3:ZfB");
      hashMap0.put(long0, utilizador0);
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores(hashMap0, hashMap1, hashMap2);
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      gestor_Utilizadores0.adicionaFaturaComprador((-1L), false, (-1L), 711L, set0, 251L, (-2812.77564), 0.0);
      assertFalse(set0.contains("~5DS8/1$<^\"N3:ZfB"));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Long, Utilizador> hashMap0 = new HashMap<Long, Utilizador>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, Long> hashMap2 = new HashMap<String, Long>();
      Long long0 = new Long((-1L));
      Utilizador utilizador0 = new Utilizador("", "~5DS8/1$<^\"N3:ZfB", "", long0, "~5DS8/1$<^\"N3:ZfB");
      hashMap0.put(long0, utilizador0);
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores(hashMap0, hashMap1, hashMap2);
      Set<String> set0 = gestor_Utilizadores0.verCarrinho((-1L));
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Long, Utilizador> hashMap0 = new HashMap<Long, Utilizador>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, Long> hashMap2 = new HashMap<String, Long>();
      Utilizador utilizador0 = new Utilizador();
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores(hashMap0, hashMap1, hashMap2);
      gestor_Utilizadores0.adicionaUtilizador("z-q=", "z-q=", "2IUIKzU2]0|!,~^U", 736L, "z-q=");
      Set<String> set0 = gestor_Utilizadores0.meusArtigos(2L);
      assertFalse(set0.contains("z-q="));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Long, Utilizador> hashMap0 = new HashMap<Long, Utilizador>();
      Long long0 = new Long(0L);
      Utilizador utilizador0 = new Utilizador();
      hashMap0.put(long0, utilizador0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, Long> hashMap2 = new HashMap<String, Long>();
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores(hashMap0, hashMap1, hashMap2);
      String string0 = gestor_Utilizadores0.imprimeFaturasVendas(0L);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      gestor_Utilizadores0.adicionaUtilizador("eR1v&{'N?v}T&", "eR1v&{'N?v}T&", "eR1v&{'N?v}T&", 1L, "eR1v&{'N?v}T&");
      String string0 = gestor_Utilizadores0.imprimeFaturasCompras(1L);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<Long, Utilizador> hashMap0 = new HashMap<Long, Utilizador>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, Long> hashMap2 = new HashMap<String, Long>();
      Long long0 = new Long((-1L));
      Utilizador utilizador0 = new Utilizador("", "~5DS8/1$<^\"N3:ZfB", "", long0, "~5DS8/1$<^\"N3:ZfB");
      hashMap0.put(long0, utilizador0);
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores(hashMap0, hashMap1, hashMap2);
      long long1 = gestor_Utilizadores0.getIdCarrinho((-1L));
      assertEquals(1L, long1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Long, Utilizador> hashMap0 = new HashMap<Long, Utilizador>();
      Long long0 = new Long(0L);
      Utilizador utilizador0 = new Utilizador();
      hashMap0.put(long0, utilizador0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, Long> hashMap2 = new HashMap<String, Long>();
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores(hashMap0, hashMap1, hashMap2);
      Set<Long> set0 = gestor_Utilizadores0.getEncomendas(0L);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      gestor_Utilizadores0.adicionaUtilizador("V9#@g&az3;4E1-Vu8", "V9#@g&az3;4E1-Vu8", "", 1L, "V9#@g&az3;4E1-Vu8");
      String string0 = gestor_Utilizadores0.getCarrinho(1L);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<Long, Utilizador> hashMap0 = new HashMap<Long, Utilizador>();
      Long long0 = new Long(0L);
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setNif(1529L);
      hashMap0.put(long0, utilizador0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, Long> hashMap2 = new HashMap<String, Long>();
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores(hashMap0, hashMap1, hashMap2);
      long long1 = gestor_Utilizadores0.devolveNif(0L);
      assertEquals(1529L, long1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<Long, Utilizador> hashMap0 = new HashMap<Long, Utilizador>();
      Long long0 = new Long(0L);
      Utilizador utilizador0 = new Utilizador();
      hashMap0.put(long0, utilizador0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, Long> hashMap2 = new HashMap<String, Long>();
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores(hashMap0, hashMap1, hashMap2);
      long long1 = gestor_Utilizadores0.devolveNif(0L);
      assertEquals((-1L), long1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      gestor_Utilizadores0.adicionaUtilizador("O artigo ", "O artigo ", "O artigo ", 0L, "");
      Set<Long> set0 = gestor_Utilizadores0.chaves();
      assertEquals(1, set0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<Long, Utilizador> hashMap0 = new HashMap<Long, Utilizador>();
      Long long0 = new Long(0L);
      Utilizador utilizador0 = new Utilizador();
      hashMap0.put(long0, utilizador0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, Long> hashMap2 = new HashMap<String, Long>();
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores(hashMap0, hashMap1, hashMap2);
      Set<String> set0 = gestor_Utilizadores0.artigosVendidos(0L);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<Long, Utilizador> hashMap0 = new HashMap<Long, Utilizador>();
      Long long0 = new Long(0L);
      Utilizador utilizador0 = new Utilizador();
      hashMap0.put(long0, utilizador0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, Long> hashMap2 = new HashMap<String, Long>();
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores(hashMap0, hashMap1, hashMap2);
      try { 
        gestor_Utilizadores0.voltaAVenderArtigo("O carrinho est\u00E1 vazio!", 0L);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo O carrinho est\u00E1 vazio! n\u00E3o existe no carrinho
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.setUtilizadores((Map<Long, Utilizador>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<Long, Utilizador> hashMap0 = new HashMap<Long, Utilizador>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, Long> hashMap2 = new HashMap<String, Long>();
      Long long0 = new Long((-1L));
      Utilizador utilizador0 = new Utilizador("", "~5DS8/1$<^\"N3:ZfB", "", long0, "~5DS8/1$<^\"N3:ZfB");
      hashMap0.put(long0, utilizador0);
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores(hashMap0, hashMap1, hashMap2);
      try { 
        gestor_Utilizadores0.passaVendidoParaVender("", (-1L));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo  n\u00E3o foi vendido
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<Long, Utilizador> hashMap0 = new HashMap<Long, Utilizador>();
      Long long0 = new Long(0L);
      Utilizador utilizador0 = new Utilizador();
      hashMap0.put(long0, utilizador0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, Long> hashMap2 = new HashMap<String, Long>();
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores(hashMap0, hashMap1, hashMap2);
      try { 
        gestor_Utilizadores0.finalizaEncomenda(0L, (LocalDate) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O carrinho est\u00E1 vazio!
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      Month month0 = Month.NOVEMBER;
      LocalDate localDate0 = MockLocalDate.of(2, month0, 1);
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.adicionaArtigoEncomenda("", 491L, 0L, localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<Long, Utilizador> hashMap0 = new HashMap<Long, Utilizador>();
      HashMap<String, Long> hashMap1 = new HashMap<String, Long>();
      Gestor_Utilizadores gestor_Utilizadores0 = null;
      try {
        gestor_Utilizadores0 = new Gestor_Utilizadores(hashMap0, (Map<String, String>) null, hashMap1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = null;
      try {
        gestor_Utilizadores0 = new Gestor_Utilizadores((Gestor_Utilizadores) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      boolean boolean0 = gestor_Utilizadores0.existeIdUtilizador("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<Long, Utilizador> hashMap0 = new HashMap<Long, Utilizador>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, Long> hashMap2 = new HashMap<String, Long>();
      Long long0 = new Long((-1L));
      Utilizador utilizador0 = new Utilizador("", "~5DS8/1$<^\"N3:ZfB", "", long0, "~5DS8/1$<^\"N3:ZfB");
      hashMap0.put(long0, utilizador0);
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores(hashMap0, hashMap1, hashMap2);
      Map<Long, Utilizador> map0 = gestor_Utilizadores0.getUtilizadores();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      Utilizador utilizador0 = gestor_Utilizadores0.devolveUtilizador((-5914L));
      assertNull(utilizador0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      Gestor_Utilizadores gestor_Utilizadores1 = new Gestor_Utilizadores(gestor_Utilizadores0);
      boolean boolean0 = gestor_Utilizadores0.equals(gestor_Utilizadores1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      boolean boolean0 = gestor_Utilizadores0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      boolean boolean0 = gestor_Utilizadores0.equals(gestor_Utilizadores0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<Long, Utilizador> hashMap0 = new HashMap<Long, Utilizador>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, Long> hashMap2 = new HashMap<String, Long>();
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores(hashMap0, hashMap1, hashMap2);
      boolean boolean0 = gestor_Utilizadores0.equals(hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      boolean boolean0 = gestor_Utilizadores0.existeUtilizador((-1102L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      Long long0 = new Long(0L);
      hashMap0.put("", long0);
      gestor_Utilizadores0.setIdUtilizadores(hashMap0);
      assertFalse(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashMap<Long, Utilizador> hashMap0 = new HashMap<Long, Utilizador>();
      Long long0 = new Long(1L);
      Utilizador utilizador0 = new Utilizador();
      hashMap0.put(long0, utilizador0);
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      gestor_Utilizadores0.setUtilizadores(hashMap0);
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      Map<Long, Utilizador> map0 = gestor_Utilizadores0.getUtilizadores();
      Map<String, String> map1 = ZoneId.SHORT_IDS;
      Map<String, Long> map2 = gestor_Utilizadores0.getIdUtilizadores();
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>(map2);
      Gestor_Utilizadores gestor_Utilizadores1 = new Gestor_Utilizadores(map0, map1, hashMap0);
      assertFalse(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMap<Long, Utilizador> hashMap0 = new HashMap<Long, Utilizador>();
      Long long0 = new Long(0L);
      Utilizador utilizador0 = new Utilizador();
      hashMap0.put(long0, utilizador0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, Long> hashMap2 = new HashMap<String, Long>();
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores(hashMap0, hashMap1, hashMap2);
      Gestor_Utilizadores gestor_Utilizadores1 = gestor_Utilizadores0.clone();
      assertFalse(gestor_Utilizadores1.equals((Object)gestor_Utilizadores0));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.meusArtigos((-2714L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      String string0 = gestor_Utilizadores0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.vendeArtigo((String) null, 1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.removeTodosComprador((-1L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.imprimeFaturasCompras(1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.removeArtigoEncomenda("", (-2L), 2664L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HashMap<Long, Utilizador> hashMap0 = new HashMap<Long, Utilizador>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, Long> hashMap2 = new HashMap<String, Long>();
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores(hashMap0, hashMap1, hashMap2);
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.finalizaEncomenda(0L, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HashMap<Long, Utilizador> hashMap0 = new HashMap<Long, Utilizador>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, Long> hashMap2 = new HashMap<String, Long>();
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores(hashMap0, hashMap1, hashMap2);
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.passaVendidoParaVender("", (-1L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      gestor_Utilizadores0.adicionaUtilizador("eR1v&{'N?v}T&", "eR1v&{'N?v}T&", "eR1v&{'N?v}T&", 1L, "eR1v&{'N?v}T&");
      Map<String, Long> map0 = gestor_Utilizadores0.getIdUtilizadores();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.artigosVendidos2(0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.getEncomendasDevolvidas(0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      HashMap<Long, Utilizador> hashMap0 = new HashMap<Long, Utilizador>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, Long> hashMap2 = new HashMap<String, Long>();
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores(hashMap0, hashMap1, hashMap2);
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.get1IdUtilizador("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.imprimeFaturasVendas(0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      HashMap<Long, Utilizador> hashMap0 = new HashMap<Long, Utilizador>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, Long> hashMap2 = new HashMap<String, Long>();
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores(hashMap0, hashMap1, hashMap2);
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.voltaAVenderArtigo("O carrinho est\u00E1 vazio!", (-1L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.getIdCarrinho(0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      HashMap<Long, Utilizador> hashMap0 = new HashMap<Long, Utilizador>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, Long> hashMap2 = new HashMap<String, Long>();
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores(hashMap0, hashMap1, hashMap2);
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.getEncomendas(0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.retiraArtigo("", 3771L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      HashMap<Long, Utilizador> hashMap0 = new HashMap<Long, Utilizador>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, Long> hashMap2 = new HashMap<String, Long>();
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores(hashMap0, hashMap1, hashMap2);
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.artigosVendidos(0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.imprime1FaturaCompra(930L, (-2058L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      HashMap<Long, Utilizador> hashMap0 = new HashMap<Long, Utilizador>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, Long> hashMap2 = new HashMap<String, Long>();
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores(hashMap0, hashMap1, hashMap2);
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.alteraQuantiVendida(0L, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.passaArtigoParaVendido("S,[~rixA l?0M<", 921L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.verCarrinho((-3351L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.novoCarrinho((-1817L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      Set<Long> set0 = gestor_Utilizadores0.chaves();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      HashMap<Long, Utilizador> hashMap0 = new HashMap<Long, Utilizador>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, Long> hashMap2 = new HashMap<String, Long>();
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores(hashMap0, hashMap1, hashMap2);
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.devolveNif(0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.getCarrinho(638L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.alteraQuantiComprada((-1945L), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.devolveEncomenda(0L, (-2L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.get1Utilizador(1480L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }
}
